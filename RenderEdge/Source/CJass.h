#pragma once

#include <Windows.h>
#include "JassApi.h"

typedef DWORD HUNIT;
typedef DWORD HWIDGET;
typedef DWORD HLIGHTNING;
typedef DWORD HPLAYER;
typedef DWORD HEFFECT;
typedef DWORD HLOCATION;
typedef DWORD HEFFECTTYPE;
typedef DWORD HRECT;
typedef DWORD HWEATHEREFFECT;
typedef DWORD HCAMERAFIELD;
typedef DWORD HBOOLEXPR;
typedef DWORD HSOUND;
typedef DWORD HCAMERASETUP;
typedef DWORD HITEMTYPE;
typedef DWORD HCONDITIONFUNC;
typedef DWORD HAIDIFFICULTY;
typedef DWORD HALLIANCETYPE;
typedef DWORD HATTACKTYPE;
typedef DWORD HBLENDMODE;
typedef DWORD HDAMAGETYPE;
typedef DWORD HDIALOGEVENT;
typedef DWORD HFGAMESTATE;
typedef DWORD HFOGSTATE;
typedef DWORD HGAMEDIFFICULTY;
typedef DWORD HGAMEEVENT;
typedef DWORD HGAMESPEED;
typedef DWORD HGAMETYPE;
typedef DWORD HIGAMESTATE;
typedef DWORD HLIMITOP;
typedef DWORD HMAPCONTROL;
typedef DWORD HMAPDENSITY;
typedef DWORD HMAPFLAG;
typedef DWORD HMAPSETTING;
typedef DWORD HMAPVISIBILITY;
typedef DWORD HPATHINGTYPE;
typedef DWORD HPLACEMENT;
typedef DWORD HPLAYERCOLOR;
typedef DWORD HPLAYEREVENT;
typedef DWORD HPLAYERGAMERESULT;
typedef DWORD HPLAYERSCORE;
typedef DWORD HPLAYERSLOTSTATE;
typedef DWORD HPLAYERSTATE;
typedef DWORD HPLAYERUNITEVENT;
typedef DWORD HRACE;
typedef DWORD HRACEPREFERENCE;
typedef DWORD HRARITYCONTROL;
typedef DWORD HSOUNDTYPE;
typedef DWORD HSTARTLOCPRIO;
typedef DWORD HTEXMAPFLAGS;
typedef DWORD HUNITEVENT;
typedef DWORD HUNITSTATE;
typedef DWORD HUNITTYPE;
typedef DWORD HVERSION;
typedef DWORD HVOLUMEGROUP;
typedef DWORD HWEAPONTYPE;
typedef DWORD HWIDGETEVENT;
typedef DWORD HDESTRUCTABLE;
typedef DWORD HDEFEATCONDITION;
typedef DWORD HFOGMODIFIER;
typedef DWORD HFORCE;
typedef DWORD HGROUP;
typedef DWORD HIMAGE;
typedef DWORD HITEM;
typedef DWORD HITEMPOOL;
typedef DWORD HLEADERBOARD;
typedef DWORD HMULTIBOARD;
typedef DWORD HQUEST;
typedef DWORD HREGION;
typedef DWORD HTEXTTAG;
typedef DWORD HTIMER;
typedef DWORD HTIMERDIALOG;
typedef DWORD HTRACKABLE;
typedef DWORD HUBERSPLAT;
typedef DWORD HUNITPOOL;
typedef DWORD HFILTERFUNC;
typedef DWORD HDIALOG;
typedef DWORD HBUTTON;
typedef DWORD HHASHTABLE;
typedef DWORD HGAMECACHE;
typedef DWORD HGAMESTATE;
typedef DWORD HHANDLE2;
typedef DWORD HABILITY;
typedef DWORD HEVENTID;
typedef DWORD HQUESTITEM;
typedef DWORD HMULTIBOARDITEM;
typedef DWORD HTRIGGERACTION;
typedef DWORD HTRIGGERCONDITION;
typedef DWORD HEVENT;
typedef DWORD HAGENT;
typedef DWORD HTERRAINDEFORMATION;

extern HCAMERAFIELD CAMERA_FIELD_TARGET_DISTANCE;
extern HCAMERAFIELD CAMERA_FIELD_FARZ;
extern HCAMERAFIELD CAMERA_FIELD_ANGLE_OF_ATTACK;
extern HCAMERAFIELD CAMERA_FIELD_FIELD_OF_VIEW;
extern HCAMERAFIELD CAMERA_FIELD_ROLL;
extern HCAMERAFIELD CAMERA_FIELD_ROTATION;
extern HCAMERAFIELD CAMERA_FIELD_ZOFFSET;
extern HCAMERAFIELD CAMERA_FIELD_NEARZ;

class jass
{
public:
	static jInteger AbilityId(jString abilityIdString);
	static jString AbilityId2String(jInteger abilityId);
	static jReal Acos(jReal x);
	static jBoolean AddAssault(jInteger arg1, jInteger arg2);
	static jBoolean AddDefenders(jInteger arg1, jInteger arg2);
	static jNothing AddGuardPost(jInteger arg1, jReal arg2, jReal arg3);
	static jNothing AddHeroXP(HUNIT whichHero, jInteger xpToAdd, jBoolean showEyeCandy);
	static jNothing AddIndicator(HWIDGET whichWidget, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	static jNothing AddItemToAllStock(jInteger itemId, jInteger currentStock, jInteger stockMax);
	static jNothing AddItemToStock(HUNIT whichUnit, jInteger itemId, jInteger currentStock, jInteger stockMax);
	static HLIGHTNING AddLightning(jString codeName, jBoolean checkVisibility, jReal x1, jReal y1, jReal x2, jReal y2);
	static HLIGHTNING AddLightningEx(jString codeName, jBoolean checkVisibility, jReal x1, jReal y1, jReal z1, jReal x2, jReal y2, jReal z2);
	static jNothing AddPlayerTechResearched(HPLAYER whichPlayer, jInteger techid, jInteger levels);
	static jNothing AddResourceAmount(HUNIT whichUnit, jInteger amount);
	static HEFFECT AddSpecialEffect(jString modelName, jReal x, jReal y);
	static HEFFECT AddSpecialEffectLoc(jString modelName, HLOCATION where);
	static HEFFECT AddSpecialEffectTarget(jString modelName, HWIDGET targetWidget, jString attachPointName);
	static HEFFECT AddSpellEffect(jString abilityString, HEFFECTTYPE t, jReal x, jReal y);
	static HEFFECT AddSpellEffectById(jInteger abilityId, HEFFECTTYPE t, jReal x, jReal y);
	static HEFFECT AddSpellEffectByIdLoc(jInteger abilityId, HEFFECTTYPE t, HLOCATION where);
	static HEFFECT AddSpellEffectLoc(jString abilityString, HEFFECTTYPE t, HLOCATION where);
	static HEFFECT AddSpellEffectTarget(jString modelName, HEFFECTTYPE t, HWIDGET targetWidget, jString attachPoint);
	static HEFFECT AddSpellEffectTargetById(jInteger abilityId, HEFFECTTYPE t, HWIDGET targetWidget, jString attachPoint);
	static jNothing AddUnitAnimationProperties(HUNIT whichUnit, jString animProperties, jBoolean add);
	static jNothing AddUnitToAllStock(jInteger unitId, jInteger currentStock, jInteger stockMax);
	static jNothing AddUnitToStock(HUNIT whichUnit, jInteger unitId, jInteger currentStock, jInteger stockMax);
	static HWEATHEREFFECT AddWeatherEffect(HRECT where, jInteger effectID);
	static jNothing AdjustCameraField(HCAMERAFIELD whichField, jReal offset, jReal duration);
	static HBOOLEXPR And(HBOOLEXPR operandA, HBOOLEXPR operandB);
	static jReal Asin(jReal y);
	static jReal Atan(jReal x);
	static jReal Atan2(jReal y, jReal x);
	static jNothing AttachSoundToUnit(HSOUND soundHandle, HUNIT whichUnit);
	static jNothing AttackMoveKill(HUNIT arg1);
	static jNothing AttackMoveXY(jInteger arg1, jInteger arg2);
	static jNothing CachePlayerHeroData(HPLAYER whichPlayer);
	static jNothing CameraSetSmoothingFactor(jReal factor);
	static jNothing CameraSetSourceNoise(jReal mag, jReal velocity);
	static jNothing CameraSetSourceNoiseEx(jReal mag, jReal velocity, jBoolean vertOnly);
	static jNothing CameraSetTargetNoise(jReal mag, jReal velocity);
	static jNothing CameraSetTargetNoiseEx(jReal mag, jReal velocity, jBoolean vertOnly);
	static jNothing CameraSetupApply(HCAMERASETUP whichSetup, jBoolean doPan, jBoolean panTimed);
	static jNothing CameraSetupApplyForceDuration(HCAMERASETUP whichSetup, jBoolean doPan, jReal forceDuration);
	static jNothing CameraSetupApplyForceDurationWithZ(HCAMERASETUP whichSetup, jReal zDestOffset, jReal forceDuration);
	static jNothing CameraSetupApplyWithZ(HCAMERASETUP whichSetup, jReal zDestOffset);
	static HLOCATION CameraSetupGetDestPositionLoc(HCAMERASETUP whichSetup);
	static jReal CameraSetupGetDestPositionX(HCAMERASETUP whichSetup);
	static jReal CameraSetupGetDestPositionY(HCAMERASETUP whichSetup);
	static jReal CameraSetupGetField(HCAMERASETUP whichSetup, HCAMERAFIELD whichField);
	static jNothing CameraSetupSetDestPosition(HCAMERASETUP whichSetup, jReal x, jReal y, jReal duration);
	static jNothing CameraSetupSetField(HCAMERASETUP whichSetup, HCAMERAFIELD whichField, jReal value, jReal duration);
	static jBoolean CaptainAtGoal();
	static jNothing CaptainAttack(jReal arg1, jReal arg2);
	static jNothing CaptainGoHome();
	static jInteger CaptainGroupSize();
	static jBoolean CaptainInCombat(jBoolean arg1);
	static jBoolean CaptainIsEmpty();
	static jBoolean CaptainIsFull();
	static jBoolean CaptainIsHome();
	static jInteger CaptainReadiness();
	static jInteger CaptainReadinessHP();
	static jInteger CaptainReadinessMa();
	static jBoolean CaptainRetreating();
	static jNothing CaptainVsPlayer(HPLAYER arg1);
	static jNothing CaptainVsUnits(HPLAYER arg1);
	static jNothing ChangeLevel(jString newLevel, jBoolean doScoreScreen);
	static jNothing Cheat(jString cheatStr);
	static jInteger ChooseRandomCreep(jInteger level);
	static jInteger ChooseRandomItem(jInteger level);
	static jInteger ChooseRandomItemEx(HITEMTYPE whichType, jInteger level);
	static jInteger ChooseRandomNPBuilding();
	static jNothing ClearCaptainTargets();
	static jNothing ClearHarvestAI();
	static jNothing ClearMapMusic();
	static jNothing ClearSelection();
	static jNothing ClearStackedSound(jString arg1, jReal arg2, jReal arg3);
	static jNothing ClearStackedSoundRect(jString arg1, HRECT arg2);
	static jNothing ClearTextMessages();
	static jNothing CommandAI(HPLAYER num, jInteger command, jInteger data);
	static jInteger CommandsWaiting();
	static HCONDITIONFUNC Condition(jCode func);
	static HAIDIFFICULTY ConvertAIDifficulty(jInteger i);
	static HALLIANCETYPE ConvertAllianceType(jInteger i);
	static HATTACKTYPE ConvertAttackType(jInteger i);
	static HBLENDMODE ConvertBlendMode(jInteger i);
	static HCAMERAFIELD ConvertCameraField(jInteger i);
	static HDAMAGETYPE ConvertDamageType(jInteger i);
	static HDIALOGEVENT ConvertDialogEvent(jInteger i);
	static HEFFECTTYPE ConvertEffectType(jInteger i);
	static HFGAMESTATE ConvertFGameState(jInteger i);
	static HFOGSTATE ConvertFogState(jInteger i);
	static HGAMEDIFFICULTY ConvertGameDifficulty(jInteger i);
	static HGAMEEVENT ConvertGameEvent(jInteger i);
	static HGAMESPEED ConvertGameSpeed(jInteger i);
	static HGAMETYPE ConvertGameType(jInteger i);
	static HIGAMESTATE ConvertIGameState(jInteger i);
	static HITEMTYPE ConvertItemType(jInteger i);
	static HLIMITOP ConvertLimitOp(jInteger i);
	static HMAPCONTROL ConvertMapControl(jInteger i);
	static HMAPDENSITY ConvertMapDensity(jInteger i);
	static HMAPFLAG ConvertMapFlag(jInteger i);
	static HMAPSETTING ConvertMapSetting(jInteger i);
	static HMAPVISIBILITY ConvertMapVisibility(jInteger i);
	static HPATHINGTYPE ConvertPathingType(jInteger i);
	static HPLACEMENT ConvertPlacement(jInteger i);
	static HPLAYERCOLOR ConvertPlayerColor(jInteger i);
	static HPLAYEREVENT ConvertPlayerEvent(jInteger i);
	static HPLAYERGAMERESULT ConvertPlayerGameResult(jInteger i);
	static HPLAYERSCORE ConvertPlayerScore(jInteger i);
	static HPLAYERSLOTSTATE ConvertPlayerSlotState(jInteger i);
	static HPLAYERSTATE ConvertPlayerState(jInteger i);
	static HPLAYERUNITEVENT ConvertPlayerUnitEvent(jInteger i);
	static HRACE ConvertRace(jInteger i);
	static HRACEPREFERENCE ConvertRacePref(jInteger i);
	static HRARITYCONTROL ConvertRarityControl(jInteger i);
	static HSOUNDTYPE ConvertSoundType(jInteger i);
	static HSTARTLOCPRIO ConvertStartLocPrio(jInteger i);
	static HTEXMAPFLAGS ConvertTexMapFlags(jInteger i);
	static HUNITEVENT ConvertUnitEvent(jInteger i);
	static HUNITSTATE ConvertUnitState(jInteger i);
	static HUNITTYPE ConvertUnitType(jInteger i);
	static jBoolean ConvertUnits(jInteger arg1, jInteger arg2);
	static HVERSION ConvertVersion(jInteger i);
	static HVOLUMEGROUP ConvertVolumeGroup(jInteger i);
	static HWEAPONTYPE ConvertWeaponType(jInteger i);
	static HWIDGETEVENT ConvertWidgetEvent(jInteger i);
	static jBoolean CopySaveGame(jString sourceSaveName, jString destSaveName);
	static jReal Cos(jReal radians);
	static HUNIT CreateBlightedGoldmine(HPLAYER id, jReal x, jReal y, jReal face);
	static HCAMERASETUP CreateCameraSetup();
	static jNothing CreateCaptains();
	static HUNIT CreateCorpse(HPLAYER whichPlayer, jInteger unitid, jReal x, jReal y, jReal face);
	static HDESTRUCTABLE CreateDeadDestructable(jInteger objectid, jReal x, jReal y, jReal face, jReal scale, jInteger variation);
	static HDESTRUCTABLE CreateDeadDestructableZ(jInteger objectid, jReal x, jReal y, jReal z, jReal face, jReal scale, jInteger variation);
	static HDEFEATCONDITION CreateDefeatCondition();
	static HDESTRUCTABLE CreateDestructable(jInteger objectid, jReal x, jReal y, jReal face, jReal scale, jInteger variation);
	static HDESTRUCTABLE CreateDestructableZ(jInteger objectid, jReal x, jReal y, jReal z, jReal face, jReal scale, jInteger variation);
	static HFOGMODIFIER CreateFogModifierRadius(HPLAYER forWhichPlayer, HFOGSTATE whichState, jReal centerx, jReal centerY, jReal radius, jBoolean useSharedVision, jBoolean afterUnits);
	static HFOGMODIFIER CreateFogModifierRadiusLoc(HPLAYER forWhichPlayer, HFOGSTATE whichState, HLOCATION center, jReal radius, jBoolean useSharedVision, jBoolean afterUnits);
	static HFOGMODIFIER CreateFogModifierRect(HPLAYER forWhichPlayer, HFOGSTATE whichState, HRECT where, jBoolean useSharedVision, jBoolean afterUnits);
	static HFORCE CreateForce();
	static HGROUP CreateGroup();
	static HIMAGE CreateImage(jString file, jReal sizeX, jReal sizeY, jReal sizeZ, jReal posX, jReal posY, jReal posZ, jReal originX, jReal originY, jReal originZ, jInteger imageType);
	static HITEM CreateItem(jInteger itemid, jReal x, jReal y);
	static HITEMPOOL CreateItemPool();
	static HLEADERBOARD CreateLeaderboard();
	static HSOUND CreateMIDISound(jString soundLabel, jInteger fadeInRate, jInteger fadeOutRate);
	static HMULTIBOARD CreateMultiboard();
	static HQUEST CreateQuest();
	static HREGION CreateRegion();
	static HSOUND CreateSound(jString fileName, jBoolean looping, jBoolean is3D, jBoolean stopwhenoutofrange, jInteger fadeInRate, jInteger fadeOutRate, jString eaxSetting);
	static HSOUND CreateSoundFilenameWithLabel(jString fileName, jBoolean looping, jBoolean is3D, jBoolean stopwhenoutofrange, jInteger fadeInRate, jInteger fadeOutRate, jString SLKEntryName);
	static HSOUND CreateSoundFromLabel(jString soundLabel, jBoolean looping, jBoolean is3D, jBoolean stopwhenoutofrange, jInteger fadeInRate, jInteger fadeOutRate);
	static HTEXTTAG CreateTextTag();
	static HTIMER CreateTimer();
	static HTIMERDIALOG CreateTimerDialog(HTIMER t);
	static HTRACKABLE CreateTrackable(jString trackableModelPath, jReal x, jReal y, jReal facing);
	static jTrigger CreateTrigger();
	static HUBERSPLAT CreateUbersplat(jReal x, jReal y, jString name, jInteger red, jInteger green, jInteger blue, jInteger alpha, jBoolean forcePaused, jBoolean noBirthTime);
	static HUNIT CreateUnit(HPLAYER id, jInteger unitid, jReal x, jReal y, jReal face);
	static HUNIT CreateUnitAtLoc(HPLAYER id, jInteger unitid, HLOCATION whichLocation, jReal face);
	static HUNIT CreateUnitAtLocByName(HPLAYER id, jString unitname, HLOCATION whichLocation, jReal face);
	static HUNIT CreateUnitByName(HPLAYER whichPlayer, jString unitname, jReal x, jReal y, jReal face);
	static HUNITPOOL CreateUnitPool();
	static jBoolean CreepsOnMap();
	static jNothing CripplePlayer(HPLAYER whichPlayer, HFORCE toWhichPlayers, jBoolean flag);
	static jNothing DebugBreak(jInteger arg1);
	static jNothing DebugFI(jString arg1, jInteger arg2);
	static jNothing DebugS(jString arg1);
	static jNothing DebugUnitID(jString arg1, jInteger arg2);
	static jInteger DecUnitAbilityLevel(HUNIT whichUnit, jInteger abilcode);
	static jNothing DefeatConditionSetDescription(HDEFEATCONDITION whichCondition, jString description);
	static jNothing DefineStartLocation(jInteger whichStartLoc, jReal x, jReal y);
	static jNothing DefineStartLocationLoc(jInteger whichStartLoc, HLOCATION whichLocation);
	static jReal Deg2Rad(jReal degrees);
	static jNothing DestroyBoolExpr(HBOOLEXPR e);
	static jNothing DestroyCondition(HCONDITIONFUNC c);
	static jNothing DestroyDefeatCondition(HDEFEATCONDITION whichCondition);
	static jNothing DestroyEffect(HEFFECT whichEffect);
	static jNothing DestroyFilter(HFILTERFUNC f);
	static jNothing DestroyFogModifier(HFOGMODIFIER whichFogModifier);
	static jNothing DestroyForce(HFORCE whichForce);
	static jNothing DestroyGroup(HGROUP whichGroup);
	static jNothing DestroyImage(HIMAGE whichImage);
	static jNothing DestroyItemPool(HITEMPOOL whichItemPool);
	static jNothing DestroyLeaderboard(HLEADERBOARD lb);
	static jBoolean DestroyLightning(HLIGHTNING whichBolt);
	static jNothing DestroyMultiboard(HMULTIBOARD lb);
	static jNothing DestroyQuest(HQUEST whichQuest);
	static jNothing DestroyTextTag(HTEXTTAG t);
	static jNothing DestroyTimer(HTIMER whichTimer);
	static jNothing DestroyTimerDialog(HTIMERDIALOG whichDialog);
	static jNothing DestroyTrigger(jTrigger whichTrigger);
	static jNothing DestroyUbersplat(HUBERSPLAT whichSplat);
	static jNothing DestroyUnitPool(HUNITPOOL whichPool);
	static jNothing DestructableRestoreLife(HDESTRUCTABLE d, jReal life, jBoolean birth);
	static HBUTTON DialogAddButton(HDIALOG whichDialog, jString buttonText, jInteger hotkey);
	static HBUTTON DialogAddQuitButton(HDIALOG whichDialog, jBoolean doScoreScreen, jString buttonText, jInteger hotkey);
	static jNothing DialogClear(HDIALOG whichDialog);
	static HDIALOG DialogCreate();
	static jNothing DialogDestroy(HDIALOG whichDialog);
	static jNothing DialogDisplay(HPLAYER whichPlayer, HDIALOG whichDialog, jBoolean flag);
	static jNothing DialogSetAsync(HDIALOG arg1);
	static jNothing DialogSetMessage(HDIALOG whichDialog, jString messageText);
	static jNothing DisablePathing();
	static jNothing DisableRestartMission(jBoolean flag);
	static jNothing DisableTrigger(jTrigger whichTrigger);
	static jNothing DisplayCineFilter(jBoolean flag);
	static jNothing DisplayLoadDialog();
	static jNothing DisplayText(jInteger arg1, jString arg2);
	static jNothing DisplayTextI(jInteger arg1, jString arg2, jInteger arg3);
	static jNothing DisplayTextII(jInteger arg1, jString arg2, jInteger arg3, jInteger arg4);
	static jNothing DisplayTextIII(jInteger arg1, jString arg2, jInteger arg3, jInteger arg4, jInteger arg5);
	static jNothing DisplayTextToPlayer(HPLAYER toPlayer, jReal x, jReal y, jString message);
	static jNothing DisplayTimedTextFromPlayer(HPLAYER toPlayer, jReal x, jReal y, jReal duration, jString message);
	static jNothing DisplayTimedTextToPlayer(HPLAYER toPlayer, jReal x, jReal y, jReal duration, jString message);
	static jBoolean DoAiScriptDebug();
	static jNothing DoNotSaveReplay();
	static jNothing EnableDragSelect(jBoolean state, jBoolean ui);
	static jNothing EnableMinimapFilterButtons(jBoolean enableAlly, jBoolean enableCreep);
	static jNothing EnableOcclusion(jBoolean flag);
	static jNothing EnablePreSelect(jBoolean state, jBoolean ui);
	static jNothing EnableSelect(jBoolean state, jBoolean ui);
	static jNothing EnableTrigger(jTrigger whichTrigger);
	static jNothing EnableUserControl(jBoolean b);
	static jNothing EnableUserUI(jBoolean b);
	static jNothing EnableWeatherEffect(HWEATHEREFFECT whichEffect, jBoolean enable);
	static jNothing EnableWorldFogBoundary(jBoolean b);
	static jNothing EndCinematicScene();
	static jNothing EndGame(jBoolean doScoreScreen);
	static jNothing EndThematicMusic();
	static jNothing EnumDestructablesInRect(HRECT r, HBOOLEXPR filter, jCode actionFunc);
	static jNothing EnumItemsInRect(HRECT r, HBOOLEXPR filter, jCode actionFunc);
	static jNothing ExecuteFunc(jString funcName);
	static jNothing FillGuardPosts();
	static HFILTERFUNC Filter(jCode func);
	static jNothing FinishUbersplat(HUBERSPLAT whichSplat);
	static HUNIT FirstOfGroup(HGROUP whichGroup);
	static jNothing FlashQuestDialogButton();
	static jNothing FlushChildHashtable(HHASHTABLE table, jInteger parentKey);
	static jNothing FlushGameCache(HGAMECACHE cache);
	static jNothing FlushParentHashtable(HHASHTABLE table);
	static jNothing FlushStoredBoolean(HGAMECACHE cache, jString missionKey, jString key);
	static jNothing FlushStoredInteger(HGAMECACHE cache, jString missionKey, jString key);
	static jNothing FlushStoredMission(HGAMECACHE cache, jString missionKey);
	static jNothing FlushStoredReal(HGAMECACHE cache, jString missionKey, jString key);
	static jNothing FlushStoredString(HGAMECACHE cache, jString missionKey, jString key);
	static jNothing FlushStoredUnit(HGAMECACHE cache, jString missionKey, jString key);
	static jNothing FogEnable(jBoolean enable);
	static jNothing FogMaskEnable(jBoolean enable);
	static jNothing FogModifierStart(HFOGMODIFIER whichFogModifier);
	static jNothing FogModifierStop(HFOGMODIFIER whichFogModifier);
	static jNothing ForForce(HFORCE whichForce, jCode callback);
	static jNothing ForGroup(HGROUP whichGroup, jCode callback);
	static jNothing ForceAddPlayer(HFORCE whichForce, HPLAYER whichPlayer);
	static jNothing ForceCampaignSelectScreen();
	static jNothing ForceCinematicSubtitles(jBoolean flag);
	static jNothing ForceClear(HFORCE whichForce);
	static jNothing ForceEnumAllies(HFORCE whichForce, HPLAYER whichPlayer, HBOOLEXPR filter);
	static jNothing ForceEnumEnemies(HFORCE whichForce, HPLAYER whichPlayer, HBOOLEXPR filter);
	static jNothing ForceEnumPlayers(HFORCE whichForce, HBOOLEXPR filter);
	static jNothing ForceEnumPlayersCounted(HFORCE whichForce, HBOOLEXPR filter, jInteger countLimit);
	static jNothing ForcePlayerStartLocation(HPLAYER whichPlayer, jInteger startLocIndex);
	static jNothing ForceQuestDialogUpdate();
	static jNothing ForceRemovePlayer(HFORCE whichForce, HPLAYER whichPlayer);
	static jNothing ForceUICancel();
	static jNothing ForceUIKey(jString key);
	static HAIDIFFICULTY GetAIDifficulty(HPLAYER num);
	static jString GetAbilityEffect(jString abilityString, HEFFECTTYPE t, jInteger index);
	static jString GetAbilityEffectById(jInteger abilityId, HEFFECTTYPE t, jInteger index);
	static jString GetAbilitySound(jString abilityString, HSOUNDTYPE t);
	static jString GetAbilitySoundById(jInteger abilityId, HSOUNDTYPE t);
	static jInteger GetAiPlayer();
	static HUNIT GetAllianceTarget();
	static jInteger GetAllyColorFilterState();
	static HUNIT GetAttacker();
	static HUNIT GetBuilding(HPLAYER arg1);
	static HUNIT GetBuyingUnit();
	static jReal GetCameraBoundMaxX();
	static jReal GetCameraBoundMaxY();
	static jReal GetCameraBoundMinX();
	static jReal GetCameraBoundMinY();
	static HLOCATION GetCameraEyePositionLoc();
	static jReal GetCameraEyePositionX();
	static jReal GetCameraEyePositionY();
	static jReal GetCameraEyePositionZ();
	static jReal GetCameraField(HCAMERAFIELD whichField);
	static jReal GetCameraMargin(jInteger whichMargin);
	static HLOCATION GetCameraTargetPositionLoc();
	static jReal GetCameraTargetPositionX();
	static jReal GetCameraTargetPositionY();
	static jReal GetCameraTargetPositionZ();
	static HUNIT GetCancelledStructure();
	static HUNIT GetChangingUnit();
	static HPLAYER GetChangingUnitPrevOwner();
	static HBUTTON GetClickedButton();
	static HDIALOG GetClickedDialog();
	static HUNIT GetConstructedStructure();
	static HUNIT GetConstructingStructure();
	static HMAPDENSITY GetCreatureDensity();
	static HUNIT GetCreepCamp(jInteger arg1, jInteger arg2, jBoolean arg3);
	static jBoolean GetCreepCampFilterState();
	static jBoolean GetCustomCampaignButtonVisible(jInteger whichButton);
	static HUNIT GetDecayingUnit();
	static HGAMEDIFFICULTY GetDefaultDifficulty();
	static jReal GetDestructableLife(HDESTRUCTABLE d);
	static jReal GetDestructableMaxLife(HDESTRUCTABLE d);
	static jString GetDestructableName(HDESTRUCTABLE d);
	static jReal GetDestructableOccluderHeight(HDESTRUCTABLE d);
	static jInteger GetDestructableTypeId(HDESTRUCTABLE d);
	static jReal GetDestructableX(HDESTRUCTABLE d);
	static jReal GetDestructableY(HDESTRUCTABLE d);
	static HUNIT GetDetectedUnit();
	static HUNIT GetDyingUnit();
	static HUNIT GetEnemyBase();
	static HUNIT GetEnemyExpansion();
	static jInteger GetEnemyPower();
	static HUNIT GetEnteringUnit();
	static HDESTRUCTABLE GetEnumDestructable();
	static HITEM GetEnumItem();
	static HPLAYER GetEnumPlayer();
	static HUNIT GetEnumUnit();
	static jReal GetEventDamage();
	static HUNIT GetEventDamageSource();
	static HPLAYER GetEventDetectingPlayer();
	static HGAMESTATE GetEventGameState();
	static jString GetEventPlayerChatString();
	static jString GetEventPlayerChatStringMatched();
	static HPLAYERSTATE GetEventPlayerState();
	static HUNIT GetEventTargetUnit();
	static HUNITSTATE GetEventUnitState();
	static HUNIT GetExpansionFoe();
	static HUNIT GetExpansionPeon();
	static jInteger GetExpansionX();
	static jInteger GetExpansionY();
	static HTIMER GetExpiredTimer();
	static HDESTRUCTABLE GetFilterDestructable();
	static HITEM GetFilterItem();
	static HPLAYER GetFilterPlayer();
	static HUNIT GetFilterUnit();
	static jReal GetFloatGameState(HFGAMESTATE whichFloatGameState);
	static jInteger GetFoodMade(jInteger unitId);
	static jInteger GetFoodUsed(jInteger unitId);
	static HGAMEDIFFICULTY GetGameDifficulty();
	static HPLACEMENT GetGamePlacement();
	static HGAMESPEED GetGameSpeed();
	static HGAMETYPE GetGameTypeSelected();
	static jInteger GetGoldOwned();
	static jInteger GetHandleId(HHANDLE2 h);
	static jInteger GetHeroAgi(HUNIT whichHero, jBoolean includeBonuses);
	static jInteger GetHeroId();
	static jInteger GetHeroInt(HUNIT whichHero, jBoolean includeBonuses);
	static jInteger GetHeroLevel(HUNIT whichHero);
	static jInteger GetHeroLevelAI();
	static jString GetHeroProperName(HUNIT whichHero);
	static jInteger GetHeroSkillPoints(HUNIT whichHero);
	static jInteger GetHeroStr(HUNIT whichHero, jBoolean includeBonuses);
	static jInteger GetHeroXP(HUNIT whichHero);
	static jInteger GetIntegerGameState(HIGAMESTATE whichIntegerGameState);
	static jInteger GetIssuedOrderId();
	static jInteger GetItemCharges(HITEM whichItem);
	static jInteger GetItemLevel(HITEM whichItem);
	static jString GetItemName(HITEM whichItem);
	static HPLAYER GetItemPlayer(HITEM whichItem);
	static HITEMTYPE GetItemType(HITEM whichItem);
	static jInteger GetItemTypeId(HITEM i);
	static jInteger GetItemUserData(HITEM whichItem);
	static jReal GetItemX(HITEM i);
	static jReal GetItemY(HITEM i);
	static HUNIT GetKillingUnit();
	static jInteger GetLastCommand();
	static jInteger GetLastData();
	static jInteger GetLearnedSkill();
	static jInteger GetLearnedSkillLevel();
	static HUNIT GetLearningUnit();
	static HUNIT GetLeavingUnit();
	static HUNIT GetLevelingUnit();
	static jReal GetLightningColorA(HLIGHTNING whichBolt);
	static jReal GetLightningColorB(HLIGHTNING whichBolt);
	static jReal GetLightningColorG(HLIGHTNING whichBolt);
	static jReal GetLightningColorR(HLIGHTNING whichBolt);
	static HUNIT GetLoadedUnit();
	static HPLAYER GetLocalPlayer();
	static jInteger GetLocalizedHotkey(jString source);
	static jString GetLocalizedString(jString source);
	static jReal GetLocationX(HLOCATION whichLocation);
	static jReal GetLocationY(HLOCATION whichLocation);
	static jReal GetLocationZ(HLOCATION whichLocation);
	static HITEM GetManipulatedItem();
	static HUNIT GetManipulatingUnit();
	static HUNIT GetMegaTarget();
	static jInteger GetMinesOwned();
	static jInteger GetNextExpansion();
	static jString GetObjectName(jInteger objectId);
	static HLOCATION GetOrderPointLoc();
	static jReal GetOrderPointX();
	static jReal GetOrderPointY();
	static HWIDGET GetOrderTarget();
	static HDESTRUCTABLE GetOrderTargetDestructable();
	static HITEM GetOrderTargetItem();
	static HUNIT GetOrderTargetUnit();
	static HUNIT GetOrderedUnit();
	static HPLAYER GetOwningPlayer(HUNIT whichUnit);
	static jBoolean GetPlayerAlliance(HPLAYER sourcePlayer, HPLAYER otherPlayer, HALLIANCETYPE whichAllianceSetting);
	static HPLAYERCOLOR GetPlayerColor(HPLAYER whichPlayer);
	static HMAPCONTROL GetPlayerController(HPLAYER whichPlayer);
	static jReal GetPlayerHandicap(HPLAYER whichPlayer);
	static jReal GetPlayerHandicapXP(HPLAYER whichPlayer);
	static jInteger GetPlayerId(HPLAYER whichPlayer);
	static jString GetPlayerName(HPLAYER whichPlayer);
	static HRACE GetPlayerRace(HPLAYER whichPlayer);
	static jInteger GetPlayerScore(HPLAYER whichPlayer, HPLAYERSCORE whichPlayerScore);
	static jBoolean GetPlayerSelectable(HPLAYER whichPlayer);
	static HPLAYERSLOTSTATE GetPlayerSlotState(HPLAYER whichPlayer);
	static jInteger GetPlayerStartLocation(HPLAYER whichPlayer);
	static jReal GetPlayerStartLocationX(HPLAYER arg1);
	static jReal GetPlayerStartLocationY(HPLAYER arg1);
	static jInteger GetPlayerState(HPLAYER whichPlayer, HPLAYERSTATE whichPlayerState);
	static jInteger GetPlayerStructureCount(HPLAYER whichPlayer, jBoolean includeIncomplete);
	static jInteger GetPlayerTaxRate(HPLAYER sourcePlayer, HPLAYER otherPlayer, HPLAYERSTATE whichResource);
	static jInteger GetPlayerTeam(HPLAYER whichPlayer);
	static jInteger GetPlayerTechCount(HPLAYER whichPlayer, jInteger techid, jBoolean specificonly);
	static jInteger GetPlayerTechMaxAllowed(HPLAYER whichPlayer, jInteger techid);
	static jBoolean GetPlayerTechResearched(HPLAYER whichPlayer, jInteger techid, jBoolean specificonly);
	static jInteger GetPlayerTypedUnitCount(HPLAYER whichPlayer, jString unitName, jBoolean includeIncomplete, jBoolean includeUpgrades);
	static jInteger GetPlayerUnitCount(HPLAYER whichPlayer, jBoolean includeIncomplete);
	static jInteger GetPlayerUnitTypeCount(HPLAYER arg1, jInteger arg2);
	static jInteger GetPlayers();
	static jInteger GetRandomInt(jInteger lowBound, jInteger highBound);
	static jReal GetRandomReal(jReal lowBound, jReal highBound);
	static jReal GetRectCenterX(HRECT whichRect);
	static jReal GetRectCenterY(HRECT whichRect);
	static jReal GetRectMaxX(HRECT whichRect);
	static jReal GetRectMaxY(HRECT whichRect);
	static jReal GetRectMinX(HRECT whichRect);
	static jReal GetRectMinY(HRECT whichRect);
	static HUNIT GetRescuer();
	static jInteger GetResearched();
	static HUNIT GetResearchingUnit();
	static jInteger GetResourceAmount(HUNIT whichUnit);
	static HMAPDENSITY GetResourceDensity();
	static HUNIT GetRevivableUnit();
	static HUNIT GetRevivingUnit();
	static jString GetSaveBasicFilename();
	static HUNIT GetSellingUnit();
	static HITEM GetSoldItem();
	static HUNIT GetSoldUnit();
	static jInteger GetSoundDuration(HSOUND soundHandle);
	static jInteger GetSoundFileDuration(jString musicFileName);
	static jBoolean GetSoundIsLoading(HSOUND soundHandle);
	static jBoolean GetSoundIsPlaying(HSOUND soundHandle);
	static HABILITY GetSpellAbility();
	static jInteger GetSpellAbilityId();
	static HUNIT GetSpellAbilityUnit();
	static HDESTRUCTABLE GetSpellTargetDestructable();
	static HITEM GetSpellTargetItem();
	static HLOCATION GetSpellTargetLoc();
	static HUNIT GetSpellTargetUnit();
	static jReal GetSpellTargetX();
	static jReal GetSpellTargetY();
	static HSTARTLOCPRIO GetStartLocPrio(jInteger whichStartLoc, jInteger prioSlotIndex);
	static jInteger GetStartLocPrioSlot(jInteger whichStartLoc, jInteger prioSlotIndex);
	static HLOCATION GetStartLocationLoc(jInteger whichStartLocation);
	static jReal GetStartLocationX(jInteger whichStartLocation);
	static jReal GetStartLocationY(jInteger whichStartLocation);
	static jBoolean GetStoredBoolean(HGAMECACHE cache, jString missionKey, jString key);
	static jInteger GetStoredInteger(HGAMECACHE cache, jString missionKey, jString key);
	static jReal GetStoredReal(HGAMECACHE cache, jString missionKey, jString key);
	static jString GetStoredString(HGAMECACHE cache, jString missionKey, jString key);
	static HUNIT GetSummonedUnit();
	static HUNIT GetSummoningUnit();
	static jInteger GetTeams();
	static jInteger GetTerrainCliffLevel(jReal x, jReal y);
	static jInteger GetTerrainType(jReal x, jReal y);
	static jInteger GetTerrainVariance(jReal x, jReal y);
	static jReal GetTimeOfDayScale();
	static HPLAYER GetTournamentFinishNowPlayer();
	static jInteger GetTournamentFinishNowRule();
	static jReal GetTournamentFinishSoonTimeRemaining();
	static jInteger GetTournamentScore(HPLAYER whichPlayer);
	static jInteger GetTownUnitCount(jInteger arg1, jInteger arg2, jBoolean arg3);
	static HUNIT GetTrainedUnit();
	static jInteger GetTrainedUnitType();
	static HUNIT GetTransportUnit();
	static HDESTRUCTABLE GetTriggerDestructable();
	static jInteger GetTriggerEvalCount(jTrigger whichTrigger);
	static HEVENTID GetTriggerEventId();
	static jInteger GetTriggerExecCount(jTrigger whichTrigger);
	static HPLAYER GetTriggerPlayer();
	static HUNIT GetTriggerUnit();
	static HWIDGET GetTriggerWidget();
	static HREGION GetTriggeringRegion();
	static HTRACKABLE GetTriggeringTrackable();
	static jTrigger GetTriggeringTrigger();
	static jInteger GetUnitAbilityLevel(HUNIT whichUnit, jInteger abilcode);
	static jReal GetUnitAcquireRange(HUNIT whichUnit);
	static jInteger GetUnitBuildTime(jInteger arg1);
	static jInteger GetUnitCount(jInteger arg1);
	static jInteger GetUnitCountDone(jInteger arg1);
	static jInteger GetUnitCurrentOrder(HUNIT whichUnit);
	static jReal GetUnitDefaultAcquireRange(HUNIT whichUnit);
	static jReal GetUnitDefaultFlyHeight(HUNIT whichUnit);
	static jReal GetUnitDefaultMoveSpeed(HUNIT whichUnit);
	static jReal GetUnitDefaultPropWindow(HUNIT whichUnit);
	static jReal GetUnitDefaultTurnSpeed(HUNIT whichUnit);
	static jReal GetUnitFacing(HUNIT whichUnit);
	static jReal GetUnitFlyHeight(HUNIT whichUnit);
	static jInteger GetUnitFoodMade(HUNIT whichUnit);
	static jInteger GetUnitFoodUsed(HUNIT whichUnit);
	static jInteger GetUnitGoldCost(jInteger arg1);
	static jInteger GetUnitLevel(HUNIT whichUnit);
	static HLOCATION GetUnitLoc(HUNIT whichUnit);
	static jReal GetUnitMoveSpeed(HUNIT whichUnit);
	static jString GetUnitName(HUNIT whichUnit);
	static jInteger GetUnitPointValue(HUNIT whichUnit);
	static jInteger GetUnitPointValueByType(jInteger unitType);
	static jReal GetUnitPropWindow(HUNIT whichUnit);
	static HRACE GetUnitRace(HUNIT whichUnit);
	static HDESTRUCTABLE GetUnitRallyDestructable(HUNIT whichUnit);
	static HLOCATION GetUnitRallyPoint(HUNIT whichUnit);
	static HUNIT GetUnitRallyUnit(HUNIT whichUnit);
	static jReal GetUnitState(HUNIT whichUnit, HUNITSTATE whichUnitState);
	static jReal GetUnitTurnSpeed(HUNIT whichUnit);
	static jInteger GetUnitTypeId(HUNIT whichUnit);
	static jInteger GetUnitUserData(HUNIT whichUnit);
	static jInteger GetUnitWoodCost(jInteger arg1);
	static jReal GetUnitX(HUNIT whichUnit);
	static jReal GetUnitY(HUNIT whichUnit);
	static jInteger GetUpgradeGoldCost(jInteger arg1);
	static jInteger GetUpgradeLevel(jInteger arg1);
	static jInteger GetUpgradeWoodCost(jInteger arg1);
	static jReal GetWidgetLife(HWIDGET whichWidget);
	static jReal GetWidgetX(HWIDGET whichWidget);
	static jReal GetWidgetY(HWIDGET whichWidget);
	static HPLAYER GetWinningPlayer();
	static HRECT GetWorldBounds();
	static jNothing GroupAddUnit(HGROUP whichGroup, HUNIT whichUnit);
	static jNothing GroupClear(HGROUP whichGroup);
	static jNothing GroupEnumUnitsInRange(HGROUP whichGroup, jReal x, jReal y, jReal radius, HBOOLEXPR filter);
	static jNothing GroupEnumUnitsInRangeCounted(HGROUP whichGroup, jReal x, jReal y, jReal radius, HBOOLEXPR filter, jInteger countLimit);
	static jNothing GroupEnumUnitsInRangeOfLoc(HGROUP whichGroup, HLOCATION whichLocation, jReal radius, HBOOLEXPR filter);
	static jNothing GroupEnumUnitsInRangeOfLocCounted(HGROUP whichGroup, HLOCATION whichLocation, jReal radius, HBOOLEXPR filter, jInteger countLimit);
	static jNothing GroupEnumUnitsInRect(HGROUP whichGroup, HRECT r, HBOOLEXPR filter);
	static jNothing GroupEnumUnitsInRectCounted(HGROUP whichGroup, HRECT r, HBOOLEXPR filter, jInteger countLimit);
	static jNothing GroupEnumUnitsOfPlayer(HGROUP whichGroup, HPLAYER whichPlayer, HBOOLEXPR filter);
	static jNothing GroupEnumUnitsOfType(HGROUP whichGroup, jString unitname, HBOOLEXPR filter);
	static jNothing GroupEnumUnitsOfTypeCounted(HGROUP whichGroup, jString unitname, HBOOLEXPR filter, jInteger countLimit);
	static jNothing GroupEnumUnitsSelected(HGROUP whichGroup, HPLAYER whichPlayer, HBOOLEXPR filter);
	static jBoolean GroupImmediateOrder(HGROUP whichGroup, jString order);
	static jBoolean GroupImmediateOrderById(HGROUP whichGroup, jInteger order);
	static jBoolean GroupPointOrder(HGROUP whichGroup, jString order, jReal x, jReal y);
	static jBoolean GroupPointOrderById(HGROUP whichGroup, jInteger order, jReal x, jReal y);
	static jBoolean GroupPointOrderByIdLoc(HGROUP whichGroup, jInteger order, HLOCATION whichLocation);
	static jBoolean GroupPointOrderLoc(HGROUP whichGroup, jString order, HLOCATION whichLocation);
	static jNothing GroupRemoveUnit(HGROUP whichGroup, HUNIT whichUnit);
	static jBoolean GroupTargetOrder(HGROUP whichGroup, jString order, HWIDGET targetWidget);
	static jBoolean GroupTargetOrderById(HGROUP whichGroup, jInteger order, HWIDGET targetWidget);
	static jNothing GroupTimedLife(jBoolean arg1);
	static jNothing HarvestGold(jInteger arg1, jInteger arg2);
	static jNothing HarvestWood(jInteger arg1, jInteger arg2);
	static jBoolean HaveSavedBoolean(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static jBoolean HaveSavedHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static jBoolean HaveSavedInteger(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static jBoolean HaveSavedReal(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static jBoolean HaveSavedString(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static jBoolean HaveStoredBoolean(HGAMECACHE cache, jString missionKey, jString key);
	static jBoolean HaveStoredInteger(HGAMECACHE cache, jString missionKey, jString key);
	static jBoolean HaveStoredReal(HGAMECACHE cache, jString missionKey, jString key);
	static jBoolean HaveStoredString(HGAMECACHE cache, jString missionKey, jString key);
	static jBoolean HaveStoredUnit(HGAMECACHE cache, jString missionKey, jString key);
	static jReal I2R(jInteger i);
	static jString I2S(jInteger i);
	static jInteger IgnoredUnits(jInteger arg1);
	static jInteger IncUnitAbilityLevel(HUNIT whichUnit, jInteger abilcode);
	static jNothing InitAssault();
	static HGAMECACHE InitGameCache(jString campaignFile);
	static HHASHTABLE InitHashtable();
	static jBoolean IsCineFilterDisplayed();
	static jBoolean IsDestructableInvulnerable(HDESTRUCTABLE d);
	static jBoolean IsFogEnabled();
	static jBoolean IsFogMaskEnabled();
	static jBoolean IsFoggedToPlayer(jReal x, jReal y, HPLAYER whichPlayer);
	static jBoolean IsGameTypeSupported(HGAMETYPE whichGameType);
	static jBoolean IsHeroUnitId(jInteger unitId);
	static jBoolean IsItemIdPawnable(jInteger itemId);
	static jBoolean IsItemIdPowerup(jInteger itemId);
	static jBoolean IsItemIdSellable(jInteger itemId);
	static jBoolean IsItemInvulnerable(HITEM whichItem);
	static jBoolean IsItemOwned(HITEM whichItem);
	static jBoolean IsItemPawnable(HITEM whichItem);
	static jBoolean IsItemPowerup(HITEM whichItem);
	static jBoolean IsItemSellable(HITEM whichItem);
	static jBoolean IsItemVisible(HITEM whichItem);
	static jBoolean IsLeaderboardDisplayed(HLEADERBOARD lb);
	static jBoolean IsLocationFoggedToPlayer(HLOCATION whichLocation, HPLAYER whichPlayer);
	static jBoolean IsLocationInRegion(HREGION whichRegion, HLOCATION whichLocation);
	static jBoolean IsLocationMaskedToPlayer(HLOCATION whichLocation, HPLAYER whichPlayer);
	static jBoolean IsLocationVisibleToPlayer(HLOCATION whichLocation, HPLAYER whichPlayer);
	static jBoolean IsMapFlagSet(HMAPFLAG whichMapFlag);
	static jBoolean IsMaskedToPlayer(jReal x, jReal y, HPLAYER whichPlayer);
	static jBoolean IsMultiboardDisplayed(HMULTIBOARD lb);
	static jBoolean IsMultiboardMinimized(HMULTIBOARD lb);
	static jBoolean IsNoDefeatCheat();
	static jBoolean IsNoVictoryCheat();
	static jBoolean IsPlayerAlly(HPLAYER whichPlayer, HPLAYER otherPlayer);
	static jBoolean IsPlayerEnemy(HPLAYER whichPlayer, HPLAYER otherPlayer);
	static jBoolean IsPlayerInForce(HPLAYER whichPlayer, HFORCE whichForce);
	static jBoolean IsPlayerObserver(HPLAYER whichPlayer);
	static jBoolean IsPlayerRacePrefSet(HPLAYER whichPlayer, HRACEPREFERENCE pref);
	static jBoolean IsPointBlighted(jReal x, jReal y);
	static jBoolean IsPointInRegion(HREGION whichRegion, jReal x, jReal y);
	static jBoolean IsQuestCompleted(HQUEST whichQuest);
	static jBoolean IsQuestDiscovered(HQUEST whichQuest);
	static jBoolean IsQuestEnabled(HQUEST whichQuest);
	static jBoolean IsQuestFailed(HQUEST whichQuest);
	static jBoolean IsQuestItemCompleted(HQUESTITEM whichQuestItem);
	static jBoolean IsQuestRequired(HQUEST whichQuest);
	static jBoolean IsSuspendedXP(HUNIT whichHero);
	static jBoolean IsTerrainPathable(jReal x, jReal y, HPATHINGTYPE t);
	static jBoolean IsTimerDialogDisplayed(HTIMERDIALOG whichDialog);
	static jBoolean IsTowered(HUNIT arg1);
	static jBoolean IsTriggerEnabled(jTrigger whichTrigger);
	static jBoolean IsTriggerWaitOnSleeps(jTrigger whichTrigger);
	static jBoolean IsUnit(HUNIT whichUnit, HUNIT whichSpecifiedUnit);
	static jBoolean IsUnitAlly(HUNIT whichUnit, HPLAYER whichPlayer);
	static jBoolean IsUnitDetected(HUNIT whichUnit, HPLAYER whichPlayer);
	static jBoolean IsUnitEnemy(HUNIT whichUnit, HPLAYER whichPlayer);
	static jBoolean IsUnitFogged(HUNIT whichUnit, HPLAYER whichPlayer);
	static jBoolean IsUnitHidden(HUNIT whichUnit);
	static jBoolean IsUnitIdType(jInteger unitId, HUNITTYPE whichUnitType);
	static jBoolean IsUnitIllusion(HUNIT whichUnit);
	static jBoolean IsUnitInForce(HUNIT whichUnit, HFORCE whichForce);
	static jBoolean IsUnitInGroup(HUNIT whichUnit, HGROUP whichGroup);
	static jBoolean IsUnitInRange(HUNIT whichUnit, HUNIT otherUnit, jReal distance);
	static jBoolean IsUnitInRangeLoc(HUNIT whichUnit, HLOCATION whichLocation, jReal distance);
	static jBoolean IsUnitInRangeXY(HUNIT whichUnit, jReal x, jReal y, jReal distance);
	static jBoolean IsUnitInRegion(HREGION whichRegion, HUNIT whichUnit);
	static jBoolean IsUnitInTransport(HUNIT whichUnit, HUNIT whichTransport);
	static jBoolean IsUnitInvisible(HUNIT whichUnit, HPLAYER whichPlayer);
	static jBoolean IsUnitLoaded(HUNIT whichUnit);
	static jBoolean IsUnitMasked(HUNIT whichUnit, HPLAYER whichPlayer);
	static jBoolean IsUnitOwnedByPlayer(HUNIT whichUnit, HPLAYER whichPlayer);
	static jBoolean IsUnitPaused(HUNIT whichHero);
	static jBoolean IsUnitRace(HUNIT whichUnit, HRACE whichRace);
	static jBoolean IsUnitSelected(HUNIT whichUnit, HPLAYER whichPlayer);
	static jBoolean IsUnitType(HUNIT whichUnit, HUNITTYPE whichUnitType);
	static jBoolean IsUnitVisible(HUNIT whichUnit, HPLAYER whichPlayer);
	static jBoolean IsVisibleToPlayer(jReal x, jReal y, HPLAYER whichPlayer);
	static jBoolean IssueBuildOrder(HUNIT whichPeon, jString unitToBuild, jReal x, jReal y);
	static jBoolean IssueBuildOrderById(HUNIT whichPeon, jInteger unitId, jReal x, jReal y);
	static jBoolean IssueImmediateOrder(HUNIT whichUnit, jString order);
	static jBoolean IssueImmediateOrderById(HUNIT whichUnit, jInteger order);
	static jBoolean IssueInstantPointOrder(HUNIT whichUnit, jString order, jReal x, jReal y, HWIDGET instantTargetWidget);
	static jBoolean IssueInstantPointOrderById(HUNIT whichUnit, jInteger order, jReal x, jReal y, HWIDGET instantTargetWidget);
	static jBoolean IssueInstantTargetOrder(HUNIT whichUnit, jString order, HWIDGET targetWidget, HWIDGET instantTargetWidget);
	static jBoolean IssueInstantTargetOrderById(HUNIT whichUnit, jInteger order, HWIDGET targetWidget, HWIDGET instantTargetWidget);
	static jBoolean IssueNeutralImmediateOrder(HPLAYER forWhichPlayer, HUNIT neutralStructure, jString unitToBuild);
	static jBoolean IssueNeutralImmediateOrderById(HPLAYER forWhichPlayer, HUNIT neutralStructure, jInteger unitId);
	static jBoolean IssueNeutralPointOrder(HPLAYER forWhichPlayer, HUNIT neutralStructure, jString unitToBuild, jReal x, jReal y);
	static jBoolean IssueNeutralPointOrderById(HPLAYER forWhichPlayer, HUNIT neutralStructure, jInteger unitId, jReal x, jReal y);
	static jBoolean IssueNeutralTargetOrder(HPLAYER forWhichPlayer, HUNIT neutralStructure, jString unitToBuild, HWIDGET target);
	static jBoolean IssueNeutralTargetOrderById(HPLAYER forWhichPlayer, HUNIT neutralStructure, jInteger unitId, HWIDGET target);
	static jBoolean IssuePointOrder(HUNIT whichUnit, jString order, jReal x, jReal y);
	static jBoolean IssuePointOrderById(HUNIT whichUnit, jInteger order, jReal x, jReal y);
	static jBoolean IssuePointOrderByIdLoc(HUNIT whichUnit, jInteger order, HLOCATION whichLocation);
	static jBoolean IssuePointOrderLoc(HUNIT whichUnit, jString order, HLOCATION whichLocation);
	static jBoolean IssueTargetOrder(HUNIT whichUnit, jString order, HWIDGET targetWidget);
	static jBoolean IssueTargetOrderById(HUNIT whichUnit, jInteger order, HWIDGET targetWidget);
	static jNothing ItemPoolAddItemType(HITEMPOOL whichItemPool, jInteger itemId, jReal weight);
	static jNothing ItemPoolRemoveItemType(HITEMPOOL whichItemPool, jInteger itemId);
	static jNothing KillDestructable(HDESTRUCTABLE d);
	static jNothing KillSoundWhenDone(HSOUND soundHandle);
	static jNothing KillUnit(HUNIT whichUnit);
	static jNothing LeaderboardAddItem(HLEADERBOARD lb, jString label, jInteger value, HPLAYER p);
	static jNothing LeaderboardClear(HLEADERBOARD lb);
	static jNothing LeaderboardDisplay(HLEADERBOARD lb, jBoolean show);
	static jInteger LeaderboardGetItemCount(HLEADERBOARD lb);
	static jString LeaderboardGetLabelText(HLEADERBOARD lb);
	static jInteger LeaderboardGetPlayerIndex(HLEADERBOARD lb, HPLAYER p);
	static jBoolean LeaderboardHasPlayerItem(HLEADERBOARD lb, HPLAYER p);
	static jNothing LeaderboardRemoveItem(HLEADERBOARD lb, jInteger index);
	static jNothing LeaderboardRemovePlayerItem(HLEADERBOARD lb, HPLAYER p);
	static jNothing LeaderboardSetItemLabel(HLEADERBOARD lb, jInteger whichItem, jString val);
	static jNothing LeaderboardSetItemLabelColor(HLEADERBOARD lb, jInteger whichItem, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	static jNothing LeaderboardSetItemStyle(HLEADERBOARD lb, jInteger whichItem, jBoolean showLabel, jBoolean showValue, jBoolean showIcon);
	static jNothing LeaderboardSetItemValue(HLEADERBOARD lb, jInteger whichItem, jInteger val);
	static jNothing LeaderboardSetItemValueColor(HLEADERBOARD lb, jInteger whichItem, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	static jNothing LeaderboardSetLabel(HLEADERBOARD lb, jString label);
	static jNothing LeaderboardSetLabelColor(HLEADERBOARD lb, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	static jNothing LeaderboardSetSizeByItemCount(HLEADERBOARD lb, jInteger count);
	static jNothing LeaderboardSetStyle(HLEADERBOARD lb, jBoolean showLabel, jBoolean showNames, jBoolean showValues, jBoolean showIcons);
	static jNothing LeaderboardSetValueColor(HLEADERBOARD lb, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	static jNothing LeaderboardSortItemsByLabel(HLEADERBOARD lb, jBoolean ascending);
	static jNothing LeaderboardSortItemsByPlayer(HLEADERBOARD lb, jBoolean ascending);
	static jNothing LeaderboardSortItemsByValue(HLEADERBOARD lb, jBoolean ascending);
	static HABILITY LoadAbilityHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static jBoolean LoadBoolean(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HBOOLEXPR LoadBooleanExprHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HBUTTON LoadButtonHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HDEFEATCONDITION LoadDefeatConditionHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HDESTRUCTABLE LoadDestructableHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HDIALOG LoadDialogHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HEFFECT LoadEffectHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HFOGMODIFIER LoadFogModifierHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HFOGSTATE LoadFogStateHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HFORCE LoadForceHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static jNothing LoadGame(jString saveFileName, jBoolean doScoreScreen);
	static HGROUP LoadGroupHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HHASHTABLE LoadHashtableHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HIMAGE LoadImageHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static jInteger LoadInteger(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HITEM LoadItemHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HITEMPOOL LoadItemPoolHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HLEADERBOARD LoadLeaderboardHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HLIGHTNING LoadLightningHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HLOCATION LoadLocationHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HMULTIBOARD LoadMultiboardHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HMULTIBOARDITEM LoadMultiboardItemHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HPLAYER LoadPlayerHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HQUEST LoadQuestHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HQUESTITEM LoadQuestItemHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static jReal LoadReal(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HRECT LoadRectHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HREGION LoadRegionHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HSOUND LoadSoundHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static jString LoadStr(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HTEXTTAG LoadTextTagHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HTIMERDIALOG LoadTimerDialogHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HTIMER LoadTimerHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HTRACKABLE LoadTrackableHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HTRIGGERACTION LoadTriggerActionHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HTRIGGERCONDITION LoadTriggerConditionHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HEVENT LoadTriggerEventHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static jTrigger LoadTriggerHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HUBERSPLAT LoadUbersplatHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HUNIT LoadUnitHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HUNITPOOL LoadUnitPoolHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static HWIDGET LoadWidgetHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static jNothing LoadZepWave(jInteger arg1, jInteger arg2);
	static HLOCATION Location(jReal x, jReal y);
	static jInteger MeleeDifficulty();
	static jBoolean MergeUnits(jInteger arg1, jInteger arg2, jInteger arg3, jInteger arg4);
	static jBoolean MoveLightning(HLIGHTNING whichBolt, jBoolean checkVisibility, jReal x1, jReal y1, jReal x2, jReal y2);
	static jBoolean MoveLightningEx(HLIGHTNING whichBolt, jBoolean checkVisibility, jReal x1, jReal y1, jReal z1, jReal x2, jReal y2, jReal z2);
	static jNothing MoveLocation(HLOCATION whichLocation, jReal newX, jReal newY);
	static jNothing MoveRectTo(HRECT whichRect, jReal newCenterX, jReal newCenterY);
	static jNothing MoveRectToLoc(HRECT whichRect, HLOCATION newCenterLoc);
	static jNothing MultiboardClear(HMULTIBOARD lb);
	static jNothing MultiboardDisplay(HMULTIBOARD lb, jBoolean show);
	static jInteger MultiboardGetColumnCount(HMULTIBOARD lb);
	static HMULTIBOARDITEM MultiboardGetItem(HMULTIBOARD lb, jInteger row, jInteger column);
	static jInteger MultiboardGetRowCount(HMULTIBOARD lb);
	static jString MultiboardGetTitleText(HMULTIBOARD lb);
	static jNothing MultiboardMinimize(HMULTIBOARD lb, jBoolean minimize);
	static jNothing MultiboardReleaseItem(HMULTIBOARDITEM mbi);
	static jNothing MultiboardSetColumnCount(HMULTIBOARD lb, jInteger count);
	static jNothing MultiboardSetItemIcon(HMULTIBOARDITEM mbi, jString iconFileName);
	static jNothing MultiboardSetItemStyle(HMULTIBOARDITEM mbi, jBoolean showValue, jBoolean showIcon);
	static jNothing MultiboardSetItemValue(HMULTIBOARDITEM mbi, jString val);
	static jNothing MultiboardSetItemValueColor(HMULTIBOARDITEM mbi, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	static jNothing MultiboardSetItemWidth(HMULTIBOARDITEM mbi, jReal width);
	static jNothing MultiboardSetItemsIcon(HMULTIBOARD lb, jString iconPath);
	static jNothing MultiboardSetItemsStyle(HMULTIBOARD lb, jBoolean showValues, jBoolean showIcons);
	static jNothing MultiboardSetItemsValue(HMULTIBOARD lb, jString value);
	static jNothing MultiboardSetItemsValueColor(HMULTIBOARD lb, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	static jNothing MultiboardSetItemsWidth(HMULTIBOARD lb, jReal width);
	static jNothing MultiboardSetRowCount(HMULTIBOARD lb, jInteger count);
	static jNothing MultiboardSetTitleText(HMULTIBOARD lb, jString label);
	static jNothing MultiboardSetTitleTextColor(HMULTIBOARD lb, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	static jNothing MultiboardSuppressDisplay(jBoolean flag);
	static jNothing NewSoundEnvironment(jString environmentName);
	static HBOOLEXPR Not(HBOOLEXPR operand);
	static HBOOLEXPR Or(HBOOLEXPR operandA, HBOOLEXPR operandB);
	static jInteger OrderId(jString orderIdString);
	static jString OrderId2String(jInteger orderId);
	static jNothing PanCameraTo(jReal x, jReal y);
	static jNothing PanCameraToTimed(jReal x, jReal y, jReal duration);
	static jNothing PanCameraToTimedWithZ(jReal x, jReal y, jReal zOffsetDest, jReal duration);
	static jNothing PanCameraToWithZ(jReal x, jReal y, jReal zOffsetDest);
	static jNothing PauseCompAI(HPLAYER p, jBoolean pause);
	static jNothing PauseGame(jBoolean flag);
	static jNothing PauseTimer(HTIMER whichTimer);
	static jNothing PauseUnit(HUNIT whichUnit, jBoolean flag);
	static jNothing PingMinimap(jReal x, jReal y, jReal duration);
	static jNothing PingMinimapEx(jReal x, jReal y, jReal duration, jInteger red, jInteger green, jInteger blue, jBoolean extraEffects);
	static HITEM PlaceRandomItem(HITEMPOOL whichItemPool, jReal x, jReal y);
	static HUNIT PlaceRandomUnit(HUNITPOOL whichPool, HPLAYER forWhichPlayer, jReal x, jReal y, jReal facing);
	static jNothing PlayCinematic(jString movieName);
	static jNothing PlayModelCinematic(jString modelName);
	static jNothing PlayMusic(jString musicName);
	static jNothing PlayMusicEx(jString musicName, jInteger frommsecs, jInteger fadeinmsecs);
	static jNothing PlayThematicMusic(jString musicFileName);
	static jNothing PlayThematicMusicEx(jString musicFileName, jInteger frommsecs);
	static HPLAYER Player(jInteger number);
	static HLEADERBOARD PlayerGetLeaderboard(HPLAYER toPlayer);
	static jNothing PlayerSetLeaderboard(HPLAYER toPlayer, HLEADERBOARD lb);
	static jNothing PopLastCommand();
	static jReal Pow(jReal x, jReal power);
	static jNothing Preload(jString filename);
	static jNothing PreloadEnd(jReal timeout);
	static jNothing PreloadEndEx();
	static jNothing PreloadGenClear();
	static jNothing PreloadGenEnd(jString filename);
	static jNothing PreloadGenStart();
	static jNothing PreloadRefresh();
	static jNothing PreloadStart();
	static jNothing Preloader(jString filename);
	static jNothing PurchaseZeppelin();
	static HQUESTITEM QuestCreateItem(HQUEST whichQuest);
	static jNothing QuestItemSetCompleted(HQUESTITEM whichQuestItem, jBoolean completed);
	static jNothing QuestItemSetDescription(HQUESTITEM whichQuestItem, jString description);
	static jNothing QuestSetCompleted(HQUEST whichQuest, jBoolean completed);
	static jNothing QuestSetDescription(HQUEST whichQuest, jString description);
	static jNothing QuestSetDiscovered(HQUEST whichQuest, jBoolean discovered);
	static jNothing QuestSetEnabled(HQUEST whichQuest, jBoolean enabled);
	static jNothing QuestSetFailed(HQUEST whichQuest, jBoolean failed);
	static jNothing QuestSetIconPath(HQUEST whichQuest, jString iconPath);
	static jNothing QuestSetRequired(HQUEST whichQuest, jBoolean required);
	static jNothing QuestSetTitle(HQUEST whichQuest, jString title);
	static jNothing QueueDestructableAnimation(HDESTRUCTABLE d, jString whichAnimation);
	static jNothing QueueUnitAnimation(HUNIT whichUnit, jString whichAnimation);
	static jInteger R2I(jReal r);
	static jString R2S(jReal r);
	static jString R2SW(jReal r, jInteger width, jInteger precision);
	static jReal Rad2Deg(jReal radians);
	static HRECT Rect(jReal minx, jReal miny, jReal maxx, jReal maxy);
	static HRECT RectFromLoc(HLOCATION min, HLOCATION max);
	static jNothing RecycleGuardPosition(HUNIT hUnit);
	static jNothing RegionAddCell(HREGION whichRegion, jReal x, jReal y);
	static jNothing RegionAddCellAtLoc(HREGION whichRegion, HLOCATION whichLocation);
	static jNothing RegionAddRect(HREGION whichRegion, HRECT r);
	static jNothing RegionClearCell(HREGION whichRegion, jReal x, jReal y);
	static jNothing RegionClearCellAtLoc(HREGION whichRegion, HLOCATION whichLocation);
	static jNothing RegionClearRect(HREGION whichRegion, HRECT r);
	static jNothing RegisterStackedSound(HSOUND soundHandle, jBoolean byPosition, jReal rectwidth, jReal rectheight);
	static jNothing ReloadGame();
	static jBoolean ReloadGameCachesFromDisk();
	static jNothing RemoveAllGuardPositions(HPLAYER num);
	static jNothing RemoveDestructable(HDESTRUCTABLE d);
	static jNothing RemoveGuardPosition(HUNIT hUnit);
	static jNothing RemoveInjuries();
	static jNothing RemoveItem(HITEM whichItem);
	static jNothing RemoveItemFromAllStock(jInteger itemId);
	static jNothing RemoveItemFromStock(HUNIT whichUnit, jInteger itemId);
	static jNothing RemoveLocation(HLOCATION whichLocation);
	static jNothing RemovePlayer(HPLAYER whichPlayer, HPLAYERGAMERESULT gameResult);
	static jNothing RemoveRect(HRECT whichRect);
	static jNothing RemoveRegion(HREGION whichRegion);
	static jBoolean RemoveSaveDirectory(jString sourceDirName);
	static jNothing RemoveSavedBoolean(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static jNothing RemoveSavedHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static jNothing RemoveSavedInteger(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static jNothing RemoveSavedReal(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static jNothing RemoveSavedString(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	static jNothing RemoveSiege();
	static jNothing RemoveUnit(HUNIT whichUnit);
	static jNothing RemoveUnitFromAllStock(jInteger unitId);
	static jNothing RemoveUnitFromStock(HUNIT whichUnit, jInteger unitId);
	static jNothing RemoveWeatherEffect(HWEATHEREFFECT whichEffect);
	static jBoolean RenameSaveDirectory(jString sourceDirName, jString destDirName);
	static jNothing ResetCaptainLocs();
	static jNothing ResetTerrainFog();
	static jNothing ResetToGameCamera(jReal duration);
	static jNothing ResetTrigger(jTrigger whichTrigger);
	static jNothing ResetUbersplat(HUBERSPLAT whichSplat);
	static jNothing ResetUnitLookAt(HUNIT whichUnit);
	static jNothing RestartGame(jBoolean doScoreScreen);
	static HUNIT RestoreUnit(HGAMECACHE cache, jString missionKey, jString key, HPLAYER forWhichPlayer, jReal x, jReal y, jReal facing);
	static jNothing ResumeMusic();
	static jNothing ResumeTimer(HTIMER whichTimer);
	static jNothing ReturnGuardPosts();
	static jBoolean ReviveHero(HUNIT whichHero, jReal x, jReal y, jBoolean doEyecandy);
	static jBoolean ReviveHeroLoc(HUNIT whichHero, HLOCATION loc, jBoolean doEyecandy);
	static jInteger S2I(jString s);
	static jReal S2R(jString s);
	static jBoolean SaveAbilityHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HABILITY whichAbility);
	static jBoolean SaveAgentHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HAGENT whichAgent);
	static jNothing SaveBoolean(HHASHTABLE table, jInteger parentKey, jInteger childKey, jBoolean value);
	static jBoolean SaveBooleanExprHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HBOOLEXPR whichBoolexpr);
	static jBoolean SaveButtonHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HBUTTON whichButton);
	static jBoolean SaveDefeatConditionHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HDEFEATCONDITION whichDefeatcondition);
	static jBoolean SaveDestructableHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HDESTRUCTABLE whichDestructable);
	static jBoolean SaveDialogHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HDIALOG whichDialog);
	static jBoolean SaveEffectHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HEFFECT whichEffect);
	static jBoolean SaveFogModifierHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HFOGMODIFIER whichFogModifier);
	static jBoolean SaveFogStateHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HFOGSTATE whichFogState);
	static jBoolean SaveForceHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HFORCE whichForce);
	static jNothing SaveGame(jString saveFileName);
	static jBoolean SaveGameCache(HGAMECACHE whichCache);
	static jBoolean SaveGameExists(jString saveName);
	static jBoolean SaveGroupHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HGROUP whichGroup);
	static jBoolean SaveHashtableHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HHASHTABLE whichHashtable);
	static jBoolean SaveImageHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HIMAGE whichImage);
	static jNothing SaveInteger(HHASHTABLE table, jInteger parentKey, jInteger childKey, jInteger value);
	static jBoolean SaveItemHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HITEM whichItem);
	static jBoolean SaveItemPoolHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HITEMPOOL whichItempool);
	static jBoolean SaveLeaderboardHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HLEADERBOARD whichLeaderboard);
	static jBoolean SaveLightningHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HLIGHTNING whichLightning);
	static jBoolean SaveLocationHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HLOCATION whichLocation);
	static jBoolean SaveMultiboardHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HMULTIBOARD whichMultiboard);
	static jBoolean SaveMultiboardItemHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HMULTIBOARDITEM whichMultiboarditem);
	static jBoolean SavePlayerHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HPLAYER whichPlayer);
	static jBoolean SaveQuestHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HQUEST whichQuest);
	static jBoolean SaveQuestItemHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HQUESTITEM whichQuestitem);
	static jNothing SaveReal(HHASHTABLE table, jInteger parentKey, jInteger childKey, jReal value);
	static jBoolean SaveRectHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HRECT whichRect);
	static jBoolean SaveRegionHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HREGION whichRegion);
	static jBoolean SaveSoundHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HSOUND whichSound);
	static jBoolean SaveStr(HHASHTABLE table, jInteger parentKey, jInteger childKey, jString value);
	static jBoolean SaveTextTagHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HTEXTTAG whichTexttag);
	static jBoolean SaveTimerDialogHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HTIMERDIALOG whichTimerdialog);
	static jBoolean SaveTimerHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HTIMER whichTimer);
	static jBoolean SaveTrackableHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HTRACKABLE whichTrackable);
	static jBoolean SaveTriggerActionHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HTRIGGERACTION whichTriggeraction);
	static jBoolean SaveTriggerConditionHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HTRIGGERCONDITION whichTriggercondition);
	static jBoolean SaveTriggerEventHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HEVENT whichEvent);
	static jBoolean SaveTriggerHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, jTrigger whichTrigger);
	static jBoolean SaveUbersplatHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HUBERSPLAT whichUbersplat);
	static jBoolean SaveUnitHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HUNIT whichUnit);
	static jBoolean SaveUnitPoolHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HUNITPOOL whichUnitpool);
	static jBoolean SaveWidgetHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HWIDGET whichWidget);
	static jNothing SelectHeroSkill(HUNIT whichHero, jInteger abilcode);
	static jNothing SelectUnit(HUNIT whichUnit, jBoolean flag);
	static jNothing SetAllItemTypeSlots(jInteger slots);
	static jNothing SetAllUnitTypeSlots(jInteger slots);
	static jNothing SetAllianceTarget(HUNIT arg1);
	static jNothing SetAllyColorFilterState(jInteger state);
	static jNothing SetAltMinimapIcon(jString iconPath);
	static jNothing SetAmphibious();
	static jNothing SetBlight(HPLAYER whichPlayer, jReal x, jReal y, jReal radius, jBoolean addBlight);
	static jNothing SetBlightLoc(HPLAYER whichPlayer, HLOCATION whichLocation, jReal radius, jBoolean addBlight);
	static jNothing SetBlightPoint(HPLAYER whichPlayer, jReal x, jReal y, jBoolean addBlight);
	static jNothing SetBlightRect(HPLAYER whichPlayer, HRECT r, jBoolean addBlight);
	static jNothing SetCameraBounds(jReal x1, jReal y1, jReal x2, jReal y2, jReal x3, jReal y3, jReal x4, jReal y4);
	static jNothing SetCameraField(HCAMERAFIELD whichField, jReal value, jReal duration);
	static jNothing SetCameraOrientController(HUNIT whichUnit, jReal xoffset, jReal yoffset);
	static jNothing SetCameraPosition(jReal x, jReal y);
	static jNothing SetCameraQuickPosition(jReal x, jReal y);
	static jNothing SetCameraRotateMode(jReal x, jReal y, jReal radiansToSweep, jReal duration);
	static jNothing SetCameraTargetController(HUNIT whichUnit, jReal xoffset, jReal yoffset, jBoolean inheritOrientation);
	static jNothing SetCampaignAI();
	static jNothing SetCampaignAvailable(jInteger campaignNumber, jBoolean available);
	static jNothing SetCampaignMenuRace(HRACE r);
	static jNothing SetCampaignMenuRaceEx(jInteger campaignIndex);
	static jNothing SetCaptainChanges(jBoolean arg1);
	static jNothing SetCaptainHome(jInteger arg1, jReal arg2, jReal arg3);
	static jNothing SetCineFilterBlendMode(HBLENDMODE whichMode);
	static jNothing SetCineFilterDuration(jReal duration);
	static jNothing SetCineFilterEndColor(jInteger red, jInteger green, jInteger blue, jInteger alpha);
	static jNothing SetCineFilterEndUV(jReal minu, jReal minv, jReal maxu, jReal maxv);
	static jNothing SetCineFilterStartColor(jInteger red, jInteger green, jInteger blue, jInteger alpha);
	static jNothing SetCineFilterStartUV(jReal minu, jReal minv, jReal maxu, jReal maxv);
	static jNothing SetCineFilterTexMapFlags(HTEXMAPFLAGS whichFlags);
	static jNothing SetCineFilterTexture(jString filename);
	static jNothing SetCinematicCamera(jString cameraModelFile);
	static jNothing SetCinematicScene(jInteger portraitUnitId, HPLAYERCOLOR color, jString speakerTitle, jString text, jReal sceneDuration, jReal voiceoverDuration);
	static jNothing SetCreatureDensity(HMAPDENSITY whichdensity);
	static jNothing SetCreepCampFilterState(jBoolean state);
	static jNothing SetCustomCampaignButtonVisible(jInteger whichButton, jBoolean visible);
	static jNothing SetDayNightModels(jString terrainDNCFile, jString unitDNCFile);
	static jNothing SetDefaultDifficulty(HGAMEDIFFICULTY g);
	static jNothing SetDefendPlayer(jBoolean arg1);
	static jNothing SetDestructableAnimation(HDESTRUCTABLE d, jString whichAnimation);
	static jNothing SetDestructableAnimationSpeed(HDESTRUCTABLE d, jReal speedFactor);
	static jNothing SetDestructableInvulnerable(HDESTRUCTABLE d, jBoolean flag);
	static jNothing SetDestructableLife(HDESTRUCTABLE d, jReal life);
	static jNothing SetDestructableMaxLife(HDESTRUCTABLE d, jReal max);
	static jNothing SetDestructableOccluderHeight(HDESTRUCTABLE d, jReal height);
	static jNothing SetDoodadAnimation(jReal x, jReal y, jReal radius, jInteger doodadID, jBoolean nearestOnly, jString animName, jBoolean animRandom);
	static jNothing SetDoodadAnimationRect(HRECT r, jInteger doodadID, jString animName, jBoolean animRandom);
	static jNothing SetEdCinematicAvailable(jInteger campaignNumber, jBoolean available);
	static jBoolean SetExpansion(HUNIT arg1, jInteger arg2);
	static jNothing SetFloatGameState(HFGAMESTATE whichFloatGameState, jReal value);
	static jNothing SetFogStateRadius(HPLAYER forWhichPlayer, HFOGSTATE whichState, jReal centerx, jReal centerY, jReal radius, jBoolean useSharedVision);
	static jNothing SetFogStateRadiusLoc(HPLAYER forWhichPlayer, HFOGSTATE whichState, HLOCATION center, jReal radius, jBoolean useSharedVision);
	static jNothing SetFogStateRect(HPLAYER forWhichPlayer, HFOGSTATE whichState, HRECT where, jBoolean useSharedVision);
	static jNothing SetGameDifficulty(HGAMEDIFFICULTY whichdifficulty);
	static jNothing SetGamePlacement(HPLACEMENT whichPlacementType);
	static jNothing SetGameSpeed(HGAMESPEED whichspeed);
	static jNothing SetGameTypeSupported(HGAMETYPE whichGameType, jBoolean value);
	static jNothing SetGroupsFlee(jBoolean arg1);
	static jNothing SetHeroAgi(HUNIT whichHero, jInteger newAgi, jBoolean permanent);
	static jNothing SetHeroInt(HUNIT whichHero, jInteger newInt, jBoolean permanent);
	static jNothing SetHeroLevel(HUNIT whichHero, jInteger level, jBoolean showEyeCandy);
	static jNothing SetHeroLevels(jCode arg1);
	static jNothing SetHeroStr(HUNIT whichHero, jInteger newStr, jBoolean permanent);
	static jNothing SetHeroXP(HUNIT whichHero, jInteger newXpVal, jBoolean showEyeCandy);
	static jNothing SetHeroesBuyItems(jBoolean arg1);
	static jNothing SetHeroesFlee(jBoolean arg1);
	static jNothing SetHeroesTakeItems(jBoolean arg1);
	static jNothing SetIgnoreInjured(jBoolean arg1);
	static jNothing SetImageAboveWater(HIMAGE whichImage, jBoolean flag, jBoolean useWaterAlpha);
	static jNothing SetImageColor(HIMAGE whichImage, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	static jNothing SetImageConstantHeight(HIMAGE whichImage, jBoolean flag, jReal height);
	static jNothing SetImagePosition(HIMAGE whichImage, jReal x, jReal y, jReal z);
	static jNothing SetImageRender(HIMAGE whichImage, jBoolean flag);
	static jNothing SetImageRenderAlways(HIMAGE whichImage, jBoolean flag);
	static jNothing SetImageType(HIMAGE whichImage, jInteger imageType);
	static jNothing SetIntegerGameState(HIGAMESTATE whichIntegerGameState, jInteger value);
	static jNothing SetIntroShotModel(jString introModelPath);
	static jNothing SetIntroShotText(jString introText);
	static jNothing SetItemCharges(HITEM whichItem, jInteger charges);
	static jNothing SetItemDropID(HITEM whichItem, jInteger unitId);
	static jNothing SetItemDropOnDeath(HITEM whichItem, jBoolean flag);
	static jNothing SetItemDroppable(HITEM i, jBoolean flag);
	static jNothing SetItemInvulnerable(HITEM whichItem, jBoolean flag);
	static jNothing SetItemPawnable(HITEM i, jBoolean flag);
	static jNothing SetItemPlayer(HITEM whichItem, HPLAYER whichPlayer, jBoolean changeColor);
	static jNothing SetItemPosition(HITEM i, jReal x, jReal y);
	static jNothing SetItemTypeSlots(HUNIT whichUnit, jInteger slots);
	static jNothing SetItemUserData(HITEM whichItem, jInteger data);
	static jNothing SetItemVisible(HITEM whichItem, jBoolean show);
	static jBoolean SetLightningColor(HLIGHTNING whichBolt, jReal r, jReal g, jReal b, jReal a);
	static jNothing SetMapDescription(jString description);
	static jNothing SetMapFlag(HMAPFLAG whichMapFlag, jBoolean value);
	static jNothing SetMapMusic(jString musicName, jBoolean random, jInteger index);
	static jNothing SetMapName(jString name);
	static jNothing SetMeleeAI();
	static jNothing SetMissionAvailable(jInteger campaignNumber, jInteger missionNumber, jBoolean available);
	static jNothing SetMusicPlayPosition(jInteger millisecs);
	static jNothing SetMusicVolume(jInteger volume);
	static jNothing SetNewHeroes(jBoolean arg1);
	static jNothing SetOpCinematicAvailable(jInteger campaignNumber, jBoolean available);
	static jNothing SetPeonsRepair(jBoolean arg1);
	static jNothing SetPlayerAbilityAvailable(HPLAYER whichPlayer, jInteger abilid, jBoolean avail);
	static jNothing SetPlayerAlliance(HPLAYER sourcePlayer, HPLAYER otherPlayer, HALLIANCETYPE whichAllianceSetting, jBoolean value);
	static jNothing SetPlayerColor(HPLAYER whichPlayer, HPLAYERCOLOR color);
	static jNothing SetPlayerController(HPLAYER whichPlayer, HMAPCONTROL controlType);
	static jNothing SetPlayerHandicap(HPLAYER whichPlayer, jReal handicap);
	static jNothing SetPlayerHandicapXP(HPLAYER whichPlayer, jReal handicap);
	static jNothing SetPlayerName(HPLAYER whichPlayer, jString name);
	static jNothing SetPlayerOnScoreScreen(HPLAYER whichPlayer, jBoolean flag);
	static jNothing SetPlayerRacePreference(HPLAYER whichPlayer, HRACEPREFERENCE whichRacePreference);
	static jNothing SetPlayerRaceSelectable(HPLAYER whichPlayer, jBoolean value);
	static jNothing SetPlayerStartLocation(HPLAYER whichPlayer, jInteger startLocIndex);
	static jNothing SetPlayerState(HPLAYER whichPlayer, HPLAYERSTATE whichPlayerState, jInteger value);
	static jNothing SetPlayerTaxRate(HPLAYER sourcePlayer, HPLAYER otherPlayer, HPLAYERSTATE whichResource, jInteger rate);
	static jNothing SetPlayerTeam(HPLAYER whichPlayer, jInteger whichTeam);
	static jNothing SetPlayerTechMaxAllowed(HPLAYER whichPlayer, jInteger techid, jInteger maximum);
	static jNothing SetPlayerTechResearched(HPLAYER whichPlayer, jInteger techid, jInteger setToLevel);
	static jNothing SetPlayerUnitsOwner(HPLAYER whichPlayer, jInteger newOwner);
	static jNothing SetPlayers(jInteger playercount);
	static jBoolean SetProduce(jInteger arg1, jInteger arg2, jInteger arg3);
	static jNothing SetRandomPaths(jBoolean arg1);
	static jNothing SetRandomSeed(jInteger seed);
	static jNothing SetRect(HRECT whichRect, jReal minx, jReal miny, jReal maxx, jReal maxy);
	static jNothing SetRectFromLoc(HRECT whichRect, HLOCATION min, HLOCATION max);
	static jNothing SetReplacementCount(jInteger arg1);
	static jNothing SetReservedLocalHeroButtons(jInteger reserved);
	static jNothing SetResourceAmount(HUNIT whichUnit, jInteger amount);
	static jNothing SetResourceDensity(HMAPDENSITY whichdensity);
	static jNothing SetSkyModel(jString skyModelFile);
	static jNothing SetSlowChopping(jBoolean arg1);
	static jNothing SetSmartArtillery(jBoolean arg1);
	static jNothing SetSoundChannel(HSOUND soundHandle, jInteger channel);
	static jNothing SetSoundConeAngles(HSOUND soundHandle, jReal inside, jReal outside, jInteger outsideVolume);
	static jNothing SetSoundConeOrientation(HSOUND soundHandle, jReal x, jReal y, jReal z);
	static jNothing SetSoundDistanceCutoff(HSOUND soundHandle, jReal cutoff);
	static jNothing SetSoundDistances(HSOUND soundHandle, jReal minDist, jReal maxDist);
	static jNothing SetSoundDuration(HSOUND soundHandle, jInteger duration);
	static jNothing SetSoundParamsFromLabel(HSOUND soundHandle, jString soundLabel);
	static jNothing SetSoundPitch(HSOUND soundHandle, jReal pitch);
	static jNothing SetSoundPlayPosition(HSOUND soundHandle, jInteger millisecs);
	static jNothing SetSoundPosition(HSOUND soundHandle, jReal x, jReal y, jReal z);
	static jNothing SetSoundVelocity(HSOUND soundHandle, jReal x, jReal y, jReal z);
	static jNothing SetSoundVolume(HSOUND soundHandle, jInteger volume);
	static jNothing SetStackedSound(jString arg1, jReal arg2, jReal arg3);
	static jNothing SetStackedSoundRect(jString arg1, HRECT arg2);
	static jNothing SetStagePoint(jReal arg1, jReal arg2);
	static jNothing SetStartLocPrio(jInteger whichStartLoc, jInteger prioSlotIndex, jInteger otherStartLocIndex, HSTARTLOCPRIO priority);
	static jNothing SetStartLocPrioCount(jInteger whichStartLoc, jInteger prioSlotCount);
	static jNothing SetTargetHeroes(jBoolean arg1);
	static jNothing SetTeams(jInteger teamcount);
	static jNothing SetTerrainFog(jReal a, jReal b, jReal c, jReal d, jReal e);
	static jNothing SetTerrainFogEx(jInteger style, jReal zstart, jReal zend, jReal density, jReal red, jReal green, jReal blue);
	static jNothing SetTerrainPathable(jReal x, jReal y, HPATHINGTYPE t, jBoolean flag);
	static jNothing SetTerrainType(jReal x, jReal y, jInteger terrainType, jInteger variation, jInteger area, jInteger shape);
	static jNothing SetTextTagAge(HTEXTTAG t, jReal age);
	static jNothing SetTextTagColor(HTEXTTAG t, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	static jNothing SetTextTagFadepoint(HTEXTTAG t, jReal fadepoint);
	static jNothing SetTextTagLifespan(HTEXTTAG t, jReal lifespan);
	static jNothing SetTextTagPermanent(HTEXTTAG t, jBoolean flag);
	static jNothing SetTextTagPos(HTEXTTAG t, jReal x, jReal y, jReal heightOffset);
	static jNothing SetTextTagPosUnit(HTEXTTAG t, HUNIT whichUnit, jReal heightOffset);
	static jNothing SetTextTagSuspended(HTEXTTAG t, jBoolean flag);
	static jNothing SetTextTagText(HTEXTTAG t, jString s, jReal height);
	static jNothing SetTextTagVelocity(HTEXTTAG t, jReal xvel, jReal yvel);
	static jNothing SetTextTagVisibility(HTEXTTAG t, jBoolean flag);
	static jNothing SetThematicMusicPlayPosition(jInteger millisecs);
	static jNothing SetTimeOfDayScale(jReal r);
	static jNothing SetTutorialCleared(jBoolean cleared);
	static jNothing SetUbersplatRender(HUBERSPLAT whichSplat, jBoolean flag);
	static jNothing SetUbersplatRenderAlways(HUBERSPLAT whichSplat, jBoolean flag);
	static jInteger SetUnitAbilityLevel(HUNIT whichUnit, jInteger abilcode, jInteger level);
	static jNothing SetUnitAcquireRange(HUNIT whichUnit, jReal newAcquireRange);
	static jNothing SetUnitAnimation(HUNIT whichUnit, jString whichAnimation);
	static jNothing SetUnitAnimationByIndex(HUNIT whichUnit, jInteger whichAnimation);
	static jNothing SetUnitAnimationWithRarity(HUNIT whichUnit, jString whichAnimation, HRARITYCONTROL rarity);
	static jNothing SetUnitBlendTime(HUNIT whichUnit, jReal blendTime);
	static jNothing SetUnitColor(HUNIT whichUnit, HPLAYERCOLOR whichColor);
	static jNothing SetUnitCreepGuard(HUNIT whichUnit, jBoolean creepGuard);
	static jNothing SetUnitExploded(HUNIT whichUnit, jBoolean exploded);
	static jNothing SetUnitFacing(HUNIT whichUnit, jReal facingAngle);
	static jNothing SetUnitFacingTimed(HUNIT whichUnit, jReal facingAngle, jReal duration);
	static jNothing SetUnitFlyHeight(HUNIT whichUnit, jReal newHeight, jReal rate);
	static jNothing SetUnitFog(jReal a, jReal b, jReal c, jReal d, jReal e);
	static jNothing SetUnitInvulnerable(HUNIT whichUnit, jBoolean flag);
	static jNothing SetUnitLookAt(HUNIT whichUnit, jString whichBone, HUNIT lookAtTarget, jReal offsetX, jReal offsetY, jReal offsetZ);
	static jNothing SetUnitMoveSpeed(HUNIT whichUnit, jReal newSpeed);
	static jNothing SetUnitOwner(HUNIT whichUnit, HPLAYER whichPlayer, jBoolean changeColor);
	static jNothing SetUnitPathing(HUNIT whichUnit, jBoolean flag);
	static jNothing SetUnitPosition(HUNIT whichUnit, jReal newX, jReal newY);
	static jNothing SetUnitPositionLoc(HUNIT whichUnit, HLOCATION whichLocation);
	static jNothing SetUnitPropWindow(HUNIT whichUnit, jReal newPropWindowAngle);
	static jNothing SetUnitRescuable(HUNIT whichUnit, HPLAYER byWhichPlayer, jBoolean flag);
	static jNothing SetUnitRescueRange(HUNIT whichUnit, jReal range);
	static jNothing SetUnitScale(HUNIT whichUnit, jReal scaleX, jReal scaleY, jReal scaleZ);
	static jNothing SetUnitState(HUNIT whichUnit, HUNITSTATE whichUnitState, jReal newVal);
	static jNothing SetUnitTimeScale(HUNIT whichUnit, jReal timeScale);
	static jNothing SetUnitTurnSpeed(HUNIT whichUnit, jReal newTurnSpeed);
	static jNothing SetUnitTypeSlots(HUNIT whichUnit, jInteger slots);
	static jNothing SetUnitUseFood(HUNIT whichUnit, jBoolean useFood);
	static jNothing SetUnitUserData(HUNIT whichUnit, jInteger data);
	static jNothing SetUnitVertexColor(HUNIT whichUnit, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	static jNothing SetUnitX(HUNIT whichUnit, jReal newX);
	static jNothing SetUnitY(HUNIT whichUnit, jReal newY);
	static jNothing SetUnitsFlee(jBoolean arg1);
	static jBoolean SetUpgrade(jInteger arg1);
	static jNothing SetWatchMegaTargets(jBoolean arg1);
	static jNothing SetWaterBaseColor(jInteger red, jInteger green, jInteger blue, jInteger alpha);
	static jNothing SetWaterDeforms(jBoolean val);
	static jNothing SetWidgetLife(HWIDGET whichWidget, jReal newLife);
	static jNothing ShiftTownSpot(jReal arg1, jReal arg2);
	static jNothing ShowDestructable(HDESTRUCTABLE d, jBoolean flag);
	static jNothing ShowImage(HIMAGE whichImage, jBoolean flag);
	static jNothing ShowInterface(jBoolean flag, jReal fadeDuration);
	static jNothing ShowUbersplat(HUBERSPLAT whichSplat, jBoolean flag);
	static jNothing ShowUnit(HUNIT whichUnit, jBoolean show);
	static jReal Sin(jReal radians);
	static jNothing Sleep(jReal arg1);
	static jReal SquareRoot(jReal x);
	static jNothing StartCampaignAI(HPLAYER num, jString script);
	static jNothing StartGetEnemyBase();
	static jNothing StartMeleeAI(HPLAYER num, jString script);
	static jNothing StartSound(HSOUND soundHandle);
	static jNothing StartThread(jCode arg1);
	static jNothing StopCamera();
	static jNothing StopGathering();
	static jNothing StopMusic(jBoolean fadeOut);
	static jNothing StopSound(HSOUND soundHandle, jBoolean killWhenDone, jBoolean fadeOut);
	static jNothing StoreBoolean(HGAMECACHE cache, jString missionKey, jString key, jBoolean value);
	static jNothing StoreInteger(HGAMECACHE cache, jString missionKey, jString key, jInteger value);
	static jNothing StoreReal(HGAMECACHE cache, jString missionKey, jString key, jReal value);
	static jBoolean StoreString(HGAMECACHE cache, jString missionKey, jString key, jString value);
	static jBoolean StoreUnit(HGAMECACHE cache, jString missionKey, jString key, HUNIT whichUnit);
	static jString StringCase(jString source, jBoolean upper);
	static jInteger StringHash(jString s);
	static jInteger StringLength(jString s);
	static jString SubString(jString source, jInteger start, jInteger end);
	static jBoolean SuicidePlayer(HPLAYER arg1, jBoolean arg2);
	static jBoolean SuicidePlayerUnits(HPLAYER arg1, jBoolean arg2);
	static jNothing SuicideUnit(jInteger arg1, jInteger arg2);
	static jNothing SuicideUnitEx(jInteger arg1, jInteger arg2, jInteger arg3);
	static jNothing SuspendHeroXP(HUNIT whichHero, jBoolean flag);
	static jNothing SuspendTimeOfDay(jBoolean b);
	static jNothing SyncSelections();
	static jNothing SyncStoredBoolean(HGAMECACHE cache, jString missionKey, jString key);
	static jNothing SyncStoredInteger(HGAMECACHE cache, jString missionKey, jString key);
	static jNothing SyncStoredReal(HGAMECACHE cache, jString missionKey, jString key);
	static jNothing SyncStoredString(HGAMECACHE cache, jString missionKey, jString key);
	static jNothing SyncStoredUnit(HGAMECACHE cache, jString missionKey, jString key);
	static jReal Tan(jReal radians);
	static jNothing TeleportCaptain(jReal arg1, jReal arg2);
	static HTERRAINDEFORMATION TerrainDeformCrater(jReal x, jReal y, jReal radius, jReal depth, jInteger duration, jBoolean permanent);
	static HTERRAINDEFORMATION TerrainDeformRandom(jReal x, jReal y, jReal radius, jReal minDelta, jReal maxDelta, jInteger duration, jInteger updateInterval);
	static HTERRAINDEFORMATION TerrainDeformRipple(jReal x, jReal y, jReal radius, jReal depth, jInteger duration, jInteger count, jReal spaceWaves, jReal timeWaves, jReal radiusStartPct, jBoolean limitNeg);
	static jNothing TerrainDeformStop(HTERRAINDEFORMATION deformation, jInteger duration);
	static jNothing TerrainDeformStopAll();
	static HTERRAINDEFORMATION TerrainDeformWave(jReal x, jReal y, jReal dirX, jReal dirY, jReal distance, jReal speed, jReal radius, jReal depth, jInteger trailTime, jInteger count);
	static jNothing TimerDialogDisplay(HTIMERDIALOG whichDialog, jBoolean display);
	static jNothing TimerDialogSetRealTimeRemaining(HTIMERDIALOG whichDialog, jReal timeRemaining);
	static jNothing TimerDialogSetSpeed(HTIMERDIALOG whichDialog, jReal speedMultFactor);
	static jNothing TimerDialogSetTimeColor(HTIMERDIALOG whichDialog, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	static jNothing TimerDialogSetTitle(HTIMERDIALOG whichDialog, jString title);
	static jNothing TimerDialogSetTitleColor(HTIMERDIALOG whichDialog, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	static jReal TimerGetElapsed(HTIMER whichTimer);
	static jReal TimerGetRemaining(HTIMER whichTimer);
	static jReal TimerGetTimeout(HTIMER whichTimer);
	static jNothing TimerStart(HTIMER whichTimer, jReal timeout, jBoolean periodic, jCode handlerFunc);
	static jBoolean TownHasHall(jInteger arg1);
	static jBoolean TownHasMine(jInteger arg1);
	static jBoolean TownThreatened();
	static jInteger TownWithMine();
	static HTRIGGERACTION TriggerAddAction(jTrigger whichTrigger, jCode actionFunc);
	static HTRIGGERCONDITION TriggerAddCondition(jTrigger whichTrigger, HBOOLEXPR condition);
	static jNothing TriggerClearActions(jTrigger whichTrigger);
	static jNothing TriggerClearConditions(jTrigger whichTrigger);
	static jBoolean TriggerEvaluate(jTrigger whichTrigger);
	static jNothing TriggerExecute(jTrigger whichTrigger);
	static jNothing TriggerExecuteWait(jTrigger whichTrigger);
	static HEVENT TriggerRegisterDeathEvent(jTrigger whichTrigger, HWIDGET whichWidget);
	static HEVENT TriggerRegisterDialogButtonEvent(jTrigger whichTrigger, HBUTTON whichButton);
	static HEVENT TriggerRegisterDialogEvent(jTrigger whichTrigger, HDIALOG whichDialog);
	static HEVENT TriggerRegisterEnterRegion(jTrigger whichTrigger, HREGION whichRegion, HBOOLEXPR filter);
	static HEVENT TriggerRegisterFilterUnitEvent(jTrigger whichTrigger, HUNIT whichUnit, HUNITEVENT whichEvent, HBOOLEXPR filter);
	static HEVENT TriggerRegisterGameEvent(jTrigger whichTrigger, HGAMEEVENT whichGameEvent);
	static HEVENT TriggerRegisterGameStateEvent(jTrigger whichTrigger, HGAMESTATE whichState, HLIMITOP opcode, jReal limitval);
	static HEVENT TriggerRegisterLeaveRegion(jTrigger whichTrigger, HREGION whichRegion, HBOOLEXPR filter);
	static HEVENT TriggerRegisterPlayerAllianceChange(jTrigger whichTrigger, HPLAYER whichPlayer, HALLIANCETYPE whichAlliance);
	static HEVENT TriggerRegisterPlayerChatEvent(jTrigger whichTrigger, HPLAYER whichPlayer, jString chatMessageToDetect, jBoolean exactMatchOnly);
	static HEVENT TriggerRegisterPlayerEvent(jTrigger whichTrigger, HPLAYER whichPlayer, HPLAYEREVENT whichPlayerEvent);
	static HEVENT TriggerRegisterPlayerStateEvent(jTrigger whichTrigger, HPLAYER whichPlayer, HPLAYERSTATE whichState, HLIMITOP opcode, jReal limitval);
	static HEVENT TriggerRegisterPlayerUnitEvent(jTrigger whichTrigger, HPLAYER whichPlayer, HPLAYERUNITEVENT whichPlayerUnitEvent, HBOOLEXPR filter);
	static HEVENT TriggerRegisterTimerEvent(jTrigger whichTrigger, jReal timeout, jBoolean periodic);
	static HEVENT TriggerRegisterTimerExpireEvent(jTrigger whichTrigger, HTIMER t);
	static HEVENT TriggerRegisterTrackableHitEvent(jTrigger whichTrigger, HTRACKABLE t);
	static HEVENT TriggerRegisterTrackableTrackEvent(jTrigger whichTrigger, HTRACKABLE t);
	static HEVENT TriggerRegisterUnitEvent(jTrigger whichTrigger, HUNIT whichUnit, HUNITEVENT whichEvent);
	static HEVENT TriggerRegisterUnitInRange(jTrigger whichTrigger, HUNIT whichUnit, jReal range, HBOOLEXPR filter);
	static HEVENT TriggerRegisterUnitStateEvent(jTrigger whichTrigger, HUNIT whichUnit, HUNITSTATE whichState, HLIMITOP opcode, jReal limitval);
	static HEVENT TriggerRegisterVariableEvent(jTrigger whichTrigger, jString varName, HLIMITOP opcode, jReal limitval);
	static jNothing TriggerRemoveAction(jTrigger whichTrigger, HTRIGGERACTION whichAction);
	static jNothing TriggerRemoveCondition(jTrigger whichTrigger, HTRIGGERCONDITION whichCondition);
	static jNothing TriggerSleepAction(jReal timeout);
	static jNothing TriggerSyncReady();
	static jNothing TriggerSyncStart();
	static jNothing TriggerWaitForSound(HSOUND s, jReal offset);
	static jNothing TriggerWaitOnSleeps(jTrigger whichTrigger, jBoolean flag);
	static jBoolean UnitAddAbility(HUNIT whichUnit, jInteger abilityId);
	static jNothing UnitAddIndicator(HUNIT whichUnit, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	static jBoolean UnitAddItem(HUNIT whichUnit, HITEM whichItem);
	static HITEM UnitAddItemById(HUNIT whichUnit, jInteger itemId);
	static jBoolean UnitAddItemToSlotById(HUNIT whichUnit, jInteger itemId, jInteger itemSlot);
	static jNothing UnitAddSleep(HUNIT whichUnit, jBoolean add);
	static jNothing UnitAddSleepPerm(HUNIT whichUnit, jBoolean add);
	static jBoolean UnitAddType(HUNIT whichUnit, HUNITTYPE whichUnitType);
	static jBoolean UnitAlive(HUNIT arg1);
	static jNothing UnitApplyTimedLife(HUNIT whichUnit, jInteger buffId, jReal duration);
	static jBoolean UnitCanSleep(HUNIT whichUnit);
	static jBoolean UnitCanSleepPerm(HUNIT whichUnit);
	static jInteger UnitCountBuffsEx(HUNIT whichUnit, jBoolean removePositive, jBoolean removeNegative, jBoolean magic, jBoolean physical, jBoolean timedLife, jBoolean aura, jBoolean autoDispel);
	static jBoolean UnitDamagePoint(HUNIT whichUnit, jReal delay, jReal radius, jReal x, jReal y, jReal amount, jBoolean attack, jBoolean ranged, HATTACKTYPE attackType, HDAMAGETYPE damageType, HWEAPONTYPE weaponType);
	static jBoolean UnitDamageTarget(HUNIT whichUnit, HWIDGET target, jReal amount, jBoolean attack, jBoolean ranged, HATTACKTYPE attackType, HDAMAGETYPE damageType, HWEAPONTYPE weaponType);
	static jBoolean UnitDropItemPoint(HUNIT whichUnit, HITEM whichItem, jReal x, jReal y);
	static jBoolean UnitDropItemSlot(HUNIT whichUnit, HITEM whichItem, jInteger slot);
	static jBoolean UnitDropItemTarget(HUNIT whichUnit, HITEM whichItem, HWIDGET target);
	static jBoolean UnitHasBuffsEx(HUNIT whichUnit, jBoolean removePositive, jBoolean removeNegative, jBoolean magic, jBoolean physical, jBoolean timedLife, jBoolean aura, jBoolean autoDispel);
	static jBoolean UnitHasItem(HUNIT whichUnit, HITEM whichItem);
	static jInteger UnitId(jString unitIdString);
	static jString UnitId2String(jInteger unitId);
	static jBoolean UnitIgnoreAlarm(HUNIT whichUnit, jBoolean flag);
	static jBoolean UnitIgnoreAlarmToggled(HUNIT whichUnit);
	static jInteger UnitInventorySize(HUNIT whichUnit);
	static jBoolean UnitInvis(HUNIT arg1);
	static jBoolean UnitIsSleeping(HUNIT whichUnit);
	static HITEM UnitItemInSlot(HUNIT whichUnit, jInteger itemSlot);
	static jBoolean UnitMakeAbilityPermanent(HUNIT whichUnit, jBoolean permanent, jInteger abilityId);
	static jBoolean UnitModifySkillPoints(HUNIT whichHero, jInteger skillPointDelta);
	static jNothing UnitPauseTimedLife(HUNIT whichUnit, jBoolean flag);
	static jNothing UnitPoolAddUnitType(HUNITPOOL whichPool, jInteger unitId, jReal weight);
	static jNothing UnitPoolRemoveUnitType(HUNITPOOL whichPool, jInteger unitId);
	static jBoolean UnitRemoveAbility(HUNIT whichUnit, jInteger abilityId);
	static jNothing UnitRemoveBuffs(HUNIT whichUnit, jBoolean removePositive, jBoolean removeNegative);
	static jNothing UnitRemoveBuffsEx(HUNIT whichUnit, jBoolean removePositive, jBoolean removeNegative, jBoolean magic, jBoolean physical, jBoolean timedLife, jBoolean aura, jBoolean autoDispel);
	static jNothing UnitRemoveItem(HUNIT whichUnit, HITEM whichItem);
	static HITEM UnitRemoveItemFromSlot(HUNIT whichUnit, jInteger itemSlot);
	static jBoolean UnitRemoveType(HUNIT whichUnit, HUNITTYPE whichUnitType);
	static jNothing UnitResetCooldown(HUNIT whichUnit);
	static jNothing UnitSetConstructionProgress(HUNIT whichUnit, jInteger constructionPercentage);
	static jNothing UnitSetUpgradeProgress(HUNIT whichUnit, jInteger upgradePercentage);
	static jNothing UnitSetUsesAltIcon(HUNIT whichUnit, jBoolean flag);
	static jNothing UnitShareVision(HUNIT whichUnit, HPLAYER whichPlayer, jBoolean share);
	static jBoolean UnitStripHeroLevel(HUNIT whichHero, jInteger howManyLevels);
	static jNothing UnitSuspendDecay(HUNIT whichUnit, jBoolean suspend);
	static jBoolean UnitUseItem(HUNIT whichUnit, HITEM whichItem);
	static jBoolean UnitUseItemPoint(HUNIT whichUnit, HITEM whichItem, jReal x, jReal y);
	static jBoolean UnitUseItemTarget(HUNIT whichUnit, HITEM whichItem, HWIDGET target);
	static jNothing UnitWakeUp(HUNIT whichUnit);
	static jNothing UnregisterStackedSound(HSOUND soundHandle, jBoolean byPosition, jReal rectwidth, jReal rectheight);
	static jNothing Unsummon(HUNIT arg1);
	static jBoolean VersionCompatible(HVERSION whichVersion);
	static HVERSION VersionGet();
	static jBoolean VersionSupported(HVERSION whichVersion);
	static jNothing VolumeGroupReset();
	static jNothing VolumeGroupSetVolume(HVOLUMEGROUP vgroup, jReal scale);
	static jBoolean WaitGetEnemyBase();
	static jNothing WaygateActivate(HUNIT waygate, jBoolean activate);
	static jReal WaygateGetDestinationX(HUNIT waygate);
	static jReal WaygateGetDestinationY(HUNIT waygate);
	static jBoolean WaygateIsActive(HUNIT waygate);
	static jNothing WaygateSetDestination(HUNIT waygate, jReal x, jReal y);
};