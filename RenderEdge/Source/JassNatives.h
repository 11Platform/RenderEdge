#pragma once

#include <Windows.h>
#include "JassApi.h"

typedef DWORD HUNIT;
typedef DWORD HWIDGET;
typedef DWORD HLIGHTNING;
typedef DWORD HPLAYER;
typedef DWORD HEFFECT;
typedef DWORD HLOCATION;
typedef DWORD HEFFECTTYPE;
typedef DWORD HRECT;
typedef DWORD HWEATHEREFFECT;
typedef DWORD HCAMERAFIELD;
typedef DWORD HBOOLEXPR;
typedef DWORD HSOUND;
typedef DWORD HCAMERASETUP;
typedef DWORD HITEMTYPE;
typedef DWORD HCONDITIONFUNC;
typedef DWORD HAIDIFFICULTY;
typedef DWORD HALLIANCETYPE;
typedef DWORD HATTACKTYPE;
typedef DWORD HBLENDMODE;
typedef DWORD HDAMAGETYPE;
typedef DWORD HDIALOGEVENT;
typedef DWORD HFGAMESTATE;
typedef DWORD HFOGSTATE;
typedef DWORD HGAMEDIFFICULTY;
typedef DWORD HGAMEEVENT;
typedef DWORD HGAMESPEED;
typedef DWORD HGAMETYPE;
typedef DWORD HIGAMESTATE;
typedef DWORD HLIMITOP;
typedef DWORD HMAPCONTROL;
typedef DWORD HMAPDENSITY;
typedef DWORD HMAPFLAG;
typedef DWORD HMAPSETTING;
typedef DWORD HMAPVISIBILITY;
typedef DWORD HPATHINGTYPE;
typedef DWORD HPLACEMENT;
typedef DWORD HPLAYERCOLOR;
typedef DWORD HPLAYEREVENT;
typedef DWORD HPLAYERGAMERESULT;
typedef DWORD HPLAYERSCORE;
typedef DWORD HPLAYERSLOTSTATE;
typedef DWORD HPLAYERSTATE;
typedef DWORD HPLAYERUNITEVENT;
typedef DWORD HRACE;
typedef DWORD HRACEPREFERENCE;
typedef DWORD HRARITYCONTROL;
typedef DWORD HSOUNDTYPE;
typedef DWORD HSTARTLOCPRIO;
typedef DWORD HTEXMAPFLAGS;
typedef DWORD HUNITEVENT;
typedef DWORD HUNITSTATE;
typedef DWORD HUNITTYPE;
typedef DWORD HVERSION;
typedef DWORD HVOLUMEGROUP;
typedef DWORD HWEAPONTYPE;
typedef DWORD HWIDGETEVENT;
typedef DWORD HDESTRUCTABLE;
typedef DWORD HDEFEATCONDITION;
typedef DWORD HFOGMODIFIER;
typedef DWORD HFORCE;
typedef DWORD HGROUP;
typedef DWORD HIMAGE;
typedef DWORD HITEM;
typedef DWORD HITEMPOOL;
typedef DWORD HLEADERBOARD;
typedef DWORD HMULTIBOARD;
typedef DWORD HQUEST;
typedef DWORD HREGION;
typedef DWORD HTEXTTAG;
typedef DWORD HTIMER;
typedef DWORD HTIMERDIALOG;
typedef DWORD HTRACKABLE;
typedef DWORD HUBERSPLAT;
typedef DWORD HUNITPOOL;
typedef DWORD HFILTERFUNC;
typedef DWORD HDIALOG;
typedef DWORD HBUTTON;
typedef DWORD HHASHTABLE;
typedef DWORD HGAMECACHE;
typedef DWORD HGAMESTATE;
typedef DWORD HHANDLE2;
typedef DWORD HABILITY;
typedef DWORD HEVENTID;
typedef DWORD HQUESTITEM;
typedef DWORD HMULTIBOARDITEM;
typedef DWORD HTRIGGERACTION;
typedef DWORD HTRIGGERCONDITION;
typedef DWORD HEVENT;
typedef DWORD HAGENT;
typedef DWORD HTERRAINDEFORMATION;

enum class ECameraField : uint32
{
	Distance,
	FarZ,
	Pitch,
	FoV,
	Roll,
	Yaw,
	ZOffset,
	NearZ,
	ListenerDistance,
	ListenerPitch
};

namespace JassNatives
{
	jInteger AbilityId(jString abilityIdString);
	jString AbilityId2String(jInteger abilityId);
	jReal Acos(jReal* x);
	jBoolean AddAssault(jInteger arg1, jInteger arg2);
	jBoolean AddDefenders(jInteger arg1, jInteger arg2);
	jNothing AddGuardPost(jInteger arg1, jReal* arg2, jReal* arg3);
	jNothing AddHeroXP(HUNIT whichHero, jInteger xpToAdd, jBoolean showEyeCandy);
	jNothing AddIndicator(HWIDGET whichWidget, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	jNothing AddItemToAllStock(jInteger itemId, jInteger currentStock, jInteger stockMax);
	jNothing AddItemToStock(HUNIT whichUnit, jInteger itemId, jInteger currentStock, jInteger stockMax);
	HLIGHTNING AddLightning(jString codeName, jBoolean checkVisibility, jReal* x1, jReal* y1, jReal* x2, jReal* y2);
	HLIGHTNING AddLightningEx(jString codeName, jBoolean checkVisibility, jReal* x1, jReal* y1, jReal* z1, jReal* x2, jReal* y2, jReal* z2);
	jNothing AddPlayerTechResearched(HPLAYER whichPlayer, jInteger techid, jInteger levels);
	jNothing AddResourceAmount(HUNIT whichUnit, jInteger amount);
	HEFFECT AddSpecialEffect(jString modelName, jReal* x, jReal* y);
	HEFFECT AddSpecialEffectLoc(jString modelName, HLOCATION where);
	HEFFECT AddSpecialEffectTarget(jString modelName, HWIDGET targetWidget, jString attachPointName);
	HEFFECT AddSpellEffect(jString abilityString, HEFFECTTYPE t, jReal* x, jReal* y);
	HEFFECT AddSpellEffectById(jInteger abilityId, HEFFECTTYPE t, jReal* x, jReal* y);
	HEFFECT AddSpellEffectByIdLoc(jInteger abilityId, HEFFECTTYPE t, HLOCATION where);
	HEFFECT AddSpellEffectLoc(jString abilityString, HEFFECTTYPE t, HLOCATION where);
	HEFFECT AddSpellEffectTarget(jString modelName, HEFFECTTYPE t, HWIDGET targetWidget, jString attachPoint);
	HEFFECT AddSpellEffectTargetById(jInteger abilityId, HEFFECTTYPE t, HWIDGET targetWidget, jString attachPoint);
	jNothing AddUnitAnimationProperties(HUNIT whichUnit, jString animProperties, jBoolean add);
	jNothing AddUnitToAllStock(jInteger unitId, jInteger currentStock, jInteger stockMax);
	jNothing AddUnitToStock(HUNIT whichUnit, jInteger unitId, jInteger currentStock, jInteger stockMax);
	HWEATHEREFFECT AddWeatherEffect(HRECT where, jInteger effectID);
	jNothing AdjustCameraField(ECameraField whichField, jReal* offset, jReal* duration);
	HBOOLEXPR And(HBOOLEXPR operandA, HBOOLEXPR operandB);
	jReal Asin(jReal* y);
	jReal Atan(jReal* x);
	jReal Atan2(jReal* y, jReal* x);
	jNothing AttachSoundToUnit(HSOUND soundHandle, HUNIT whichUnit);
	jNothing AttackMoveKill(HUNIT arg1);
	jNothing AttackMoveXY(jInteger arg1, jInteger arg2);
	jNothing CachePlayerHeroData(HPLAYER whichPlayer);
	jNothing CameraSetSmoothingFactor(jReal* factor);
	jNothing CameraSetSourceNoise(jReal* mag, jReal* velocity);
	jNothing CameraSetSourceNoiseEx(jReal* mag, jReal* velocity, jBoolean vertOnly);
	jNothing CameraSetTargetNoise(jReal* mag, jReal* velocity);
	jNothing CameraSetTargetNoiseEx(jReal* mag, jReal* velocity, jBoolean vertOnly);
	jNothing CameraSetupApply(HCAMERASETUP whichSetup, jBoolean doPan, jBoolean panTimed);
	jNothing CameraSetupApplyForceDuration(HCAMERASETUP whichSetup, jBoolean doPan, jReal* forceDuration);
	jNothing CameraSetupApplyForceDurationWithZ(HCAMERASETUP whichSetup, jReal* zDestOffset, jReal* forceDuration);
	jNothing CameraSetupApplyWithZ(HCAMERASETUP whichSetup, jReal* zDestOffset);
	HLOCATION CameraSetupGetDestPositionLoc(HCAMERASETUP whichSetup);
	jReal CameraSetupGetDestPositionX(HCAMERASETUP whichSetup);
	jReal CameraSetupGetDestPositionY(HCAMERASETUP whichSetup);
	jReal CameraSetupGetField(HCAMERASETUP whichSetup, ECameraField whichField);
	jNothing CameraSetupSetDestPosition(HCAMERASETUP whichSetup, jReal* x, jReal* y, jReal* duration);
	jNothing CameraSetupSetField(HCAMERASETUP whichSetup, ECameraField whichField, jReal* value, jReal* duration);
	jBoolean CaptainAtGoal();
	jNothing CaptainAttack(jReal* arg1, jReal* arg2);
	jNothing CaptainGoHome();
	jInteger CaptainGroupSize();
	jBoolean CaptainInCombat(jBoolean arg1);
	jBoolean CaptainIsEmpty();
	jBoolean CaptainIsFull();
	jBoolean CaptainIsHome();
	jInteger CaptainReadiness();
	jInteger CaptainReadinessHP();
	jInteger CaptainReadinessMa();
	jBoolean CaptainRetreating();
	jNothing CaptainVsPlayer(HPLAYER arg1);
	jNothing CaptainVsUnits(HPLAYER arg1);
	jNothing ChangeLevel(jString newLevel, jBoolean doScoreScreen);
	jNothing Cheat(jString cheatStr);
	jInteger ChooseRandomCreep(jInteger level);
	jInteger ChooseRandomItem(jInteger level);
	jInteger ChooseRandomItemEx(HITEMTYPE whichType, jInteger level);
	jInteger ChooseRandomNPBuilding();
	jNothing ClearCaptainTargets();
	jNothing ClearHarvestAI();
	jNothing ClearMapMusic();
	jNothing ClearSelection();
	jNothing ClearStackedSound(jString arg1, jReal* arg2, jReal* arg3);
	jNothing ClearStackedSoundRect(jString arg1, HRECT arg2);
	jNothing ClearTextMessages();
	jNothing CommandAI(HPLAYER num, jInteger command, jInteger data);
	jInteger CommandsWaiting();
	HCONDITIONFUNC Condition(jCode func);
	HAIDIFFICULTY ConvertAIDifficulty(jInteger i);
	HALLIANCETYPE ConvertAllianceType(jInteger i);
	HATTACKTYPE ConvertAttackType(jInteger i);
	HBLENDMODE ConvertBlendMode(jInteger i);
	ECameraField ConvertCameraField(jInteger i);
	HDAMAGETYPE ConvertDamageType(jInteger i);
	HDIALOGEVENT ConvertDialogEvent(jInteger i);
	HEFFECTTYPE ConvertEffectType(jInteger i);
	HFGAMESTATE ConvertFGameState(jInteger i);
	HFOGSTATE ConvertFogState(jInteger i);
	HGAMEDIFFICULTY ConvertGameDifficulty(jInteger i);
	HGAMEEVENT ConvertGameEvent(jInteger i);
	HGAMESPEED ConvertGameSpeed(jInteger i);
	HGAMETYPE ConvertGameType(jInteger i);
	HIGAMESTATE ConvertIGameState(jInteger i);
	HITEMTYPE ConvertItemType(jInteger i);
	HLIMITOP ConvertLimitOp(jInteger i);
	HMAPCONTROL ConvertMapControl(jInteger i);
	HMAPDENSITY ConvertMapDensity(jInteger i);
	HMAPFLAG ConvertMapFlag(jInteger i);
	HMAPSETTING ConvertMapSetting(jInteger i);
	HMAPVISIBILITY ConvertMapVisibility(jInteger i);
	HPATHINGTYPE ConvertPathingType(jInteger i);
	HPLACEMENT ConvertPlacement(jInteger i);
	HPLAYERCOLOR ConvertPlayerColor(jInteger i);
	HPLAYEREVENT ConvertPlayerEvent(jInteger i);
	HPLAYERGAMERESULT ConvertPlayerGameResult(jInteger i);
	HPLAYERSCORE ConvertPlayerScore(jInteger i);
	HPLAYERSLOTSTATE ConvertPlayerSlotState(jInteger i);
	HPLAYERSTATE ConvertPlayerState(jInteger i);
	HPLAYERUNITEVENT ConvertPlayerUnitEvent(jInteger i);
	HRACE ConvertRace(jInteger i);
	HRACEPREFERENCE ConvertRacePref(jInteger i);
	HRARITYCONTROL ConvertRarityControl(jInteger i);
	HSOUNDTYPE ConvertSoundType(jInteger i);
	HSTARTLOCPRIO ConvertStartLocPrio(jInteger i);
	HTEXMAPFLAGS ConvertTexMapFlags(jInteger i);
	HUNITEVENT ConvertUnitEvent(jInteger i);
	HUNITSTATE ConvertUnitState(jInteger i);
	HUNITTYPE ConvertUnitType(jInteger i);
	jBoolean ConvertUnits(jInteger arg1, jInteger arg2);
	HVERSION ConvertVersion(jInteger i);
	HVOLUMEGROUP ConvertVolumeGroup(jInteger i);
	HWEAPONTYPE ConvertWeaponType(jInteger i);
	HWIDGETEVENT ConvertWidgetEvent(jInteger i);
	jBoolean CopySaveGame(jString sourceSaveName, jString destSaveName);
	jReal Cos(jReal* radians);
	HUNIT CreateBlightedGoldmine(HPLAYER id, jReal* x, jReal* y, jReal* face);
	HCAMERASETUP CreateCameraSetup();
	jNothing CreateCaptains();
	HUNIT CreateCorpse(HPLAYER whichPlayer, jInteger unitid, jReal* x, jReal* y, jReal* face);
	HDESTRUCTABLE CreateDeadDestructable(jInteger objectid, jReal* x, jReal* y, jReal* face, jReal* scale, jInteger variation);
	HDESTRUCTABLE CreateDeadDestructableZ(jInteger objectid, jReal* x, jReal* y, jReal* z, jReal* face, jReal* scale, jInteger variation);
	HDEFEATCONDITION CreateDefeatCondition();
	HDESTRUCTABLE CreateDestructable(jInteger objectid, jReal* x, jReal* y, jReal* face, jReal* scale, jInteger variation);
	HDESTRUCTABLE CreateDestructableZ(jInteger objectid, jReal* x, jReal* y, jReal* z, jReal* face, jReal* scale, jInteger variation);
	HFOGMODIFIER CreateFogModifierRadius(HPLAYER forWhichPlayer, HFOGSTATE whichState, jReal* centerx, jReal* centerY, jReal* radius, jBoolean useSharedVision, jBoolean afterUnits);
	HFOGMODIFIER CreateFogModifierRadiusLoc(HPLAYER forWhichPlayer, HFOGSTATE whichState, HLOCATION center, jReal* radius, jBoolean useSharedVision, jBoolean afterUnits);
	HFOGMODIFIER CreateFogModifierRect(HPLAYER forWhichPlayer, HFOGSTATE whichState, HRECT where, jBoolean useSharedVision, jBoolean afterUnits);
	HFORCE CreateForce();
	HGROUP CreateGroup();
	HIMAGE CreateImage(jString file, jReal* sizeX, jReal* sizeY, jReal* sizeZ, jReal* posX, jReal* posY, jReal* posZ, jReal* originX, jReal* originY, jReal* originZ, jInteger imageType);
	HITEM CreateItem(jInteger itemid, jReal* x, jReal* y);
	HITEMPOOL CreateItemPool();
	HLEADERBOARD CreateLeaderboard();
	HSOUND CreateMIDISound(jString soundLabel, jInteger fadeInRate, jInteger fadeOutRate);
	HMULTIBOARD CreateMultiboard();
	HQUEST CreateQuest();
	HREGION CreateRegion();
	HSOUND CreateSound(jString fileName, jBoolean looping, jBoolean is3D, jBoolean stopwhenoutofrange, jInteger fadeInRate, jInteger fadeOutRate, jString eaxSetting);
	HSOUND CreateSoundFilenameWithLabel(jString fileName, jBoolean looping, jBoolean is3D, jBoolean stopwhenoutofrange, jInteger fadeInRate, jInteger fadeOutRate, jString SLKEntryName);
	HSOUND CreateSoundFromLabel(jString soundLabel, jBoolean looping, jBoolean is3D, jBoolean stopwhenoutofrange, jInteger fadeInRate, jInteger fadeOutRate);
	HTEXTTAG CreateTextTag();
	HTIMER CreateTimer();
	HTIMERDIALOG CreateTimerDialog(HTIMER t);
	HTRACKABLE CreateTrackable(jString trackableModelPath, jReal* x, jReal* y, jReal* facing);
	jTrigger CreateTrigger();
	HUBERSPLAT CreateUbersplat(jReal* x, jReal* y, jString name, jInteger red, jInteger green, jInteger blue, jInteger alpha, jBoolean forcePaused, jBoolean noBirthTime);
	HUNIT CreateUnit(HPLAYER id, jInteger unitid, jReal* x, jReal* y, jReal* face);
	HUNIT CreateUnitAtLoc(HPLAYER id, jInteger unitid, HLOCATION whichLocation, jReal* face);
	HUNIT CreateUnitAtLocByName(HPLAYER id, jString unitname, HLOCATION whichLocation, jReal* face);
	HUNIT CreateUnitByName(HPLAYER whichPlayer, jString unitname, jReal* x, jReal* y, jReal* face);
	HUNITPOOL CreateUnitPool();
	jBoolean CreepsOnMap();
	jNothing CripplePlayer(HPLAYER whichPlayer, HFORCE toWhichPlayers, jBoolean flag);
	jNothing DebugBreak(jInteger arg1);
	jNothing DebugFI(jString arg1, jInteger arg2);
	jNothing DebugS(jString arg1);
	jNothing DebugUnitID(jString arg1, jInteger arg2);
	jInteger DecUnitAbilityLevel(HUNIT whichUnit, jInteger abilcode);
	jNothing DefeatConditionSetDescription(HDEFEATCONDITION whichCondition, jString description);
	jNothing DefineStartLocation(jInteger whichStartLoc, jReal* x, jReal* y);
	jNothing DefineStartLocationLoc(jInteger whichStartLoc, HLOCATION whichLocation);
	jReal Deg2Rad(jReal* degrees);
	jNothing DestroyBoolExpr(HBOOLEXPR e);
	jNothing DestroyCondition(HCONDITIONFUNC c);
	jNothing DestroyDefeatCondition(HDEFEATCONDITION whichCondition);
	jNothing DestroyEffect(HEFFECT whichEffect);
	jNothing DestroyFilter(HFILTERFUNC f);
	jNothing DestroyFogModifier(HFOGMODIFIER whichFogModifier);
	jNothing DestroyForce(HFORCE whichForce);
	jNothing DestroyGroup(HGROUP whichGroup);
	jNothing DestroyImage(HIMAGE whichImage);
	jNothing DestroyItemPool(HITEMPOOL whichItemPool);
	jNothing DestroyLeaderboard(HLEADERBOARD lb);
	jBoolean DestroyLightning(HLIGHTNING whichBolt);
	jNothing DestroyMultiboard(HMULTIBOARD lb);
	jNothing DestroyQuest(HQUEST whichQuest);
	jNothing DestroyTextTag(HTEXTTAG t);
	jNothing DestroyTimer(HTIMER whichTimer);
	jNothing DestroyTimerDialog(HTIMERDIALOG whichDialog);
	jNothing DestroyTrigger(jTrigger whichTrigger);
	jNothing DestroyUbersplat(HUBERSPLAT whichSplat);
	jNothing DestroyUnitPool(HUNITPOOL whichPool);
	jNothing DestructableRestoreLife(HDESTRUCTABLE d, jReal* life, jBoolean birth);
	HBUTTON DialogAddButton(HDIALOG whichDialog, jString buttonText, jInteger hotkey);
	HBUTTON DialogAddQuitButton(HDIALOG whichDialog, jBoolean doScoreScreen, jString buttonText, jInteger hotkey);
	jNothing DialogClear(HDIALOG whichDialog);
	HDIALOG DialogCreate();
	jNothing DialogDestroy(HDIALOG whichDialog);
	jNothing DialogDisplay(HPLAYER whichPlayer, HDIALOG whichDialog, jBoolean flag);
	jNothing DialogSetAsync(HDIALOG arg1);
	jNothing DialogSetMessage(HDIALOG whichDialog, jString messageText);
	jNothing DisablePathing();
	jNothing DisableRestartMission(jBoolean flag);
	jNothing DisableTrigger(jTrigger whichTrigger);
	jNothing DisplayCineFilter(jBoolean flag);
	jNothing DisplayLoadDialog();
	jNothing DisplayText(jInteger arg1, jString arg2);
	jNothing DisplayTextI(jInteger arg1, jString arg2, jInteger arg3);
	jNothing DisplayTextII(jInteger arg1, jString arg2, jInteger arg3, jInteger arg4);
	jNothing DisplayTextIII(jInteger arg1, jString arg2, jInteger arg3, jInteger arg4, jInteger arg5);
	jNothing DisplayTextToPlayer(HPLAYER toPlayer, jReal* x, jReal* y, jString msg);
	jNothing DisplayTimedTextFromPlayer(HPLAYER toPlayer, jReal* x, jReal* y, jReal* duration, jString msg);
	jNothing DisplayTimedTextToPlayer(HPLAYER toPlayer, jReal* x, jReal* y, jReal* duration, jString msg);
	jBoolean DoAiScriptDebug();
	jNothing DoNotSaveReplay();
	jNothing EnableDragSelect(jBoolean state, jBoolean ui);
	jNothing EnableMinimapFilterButtons(jBoolean enableAlly, jBoolean enableCreep);
	jNothing EnableOcclusion(jBoolean flag);
	jNothing EnablePreSelect(jBoolean state, jBoolean ui);
	jNothing EnableSelect(jBoolean state, jBoolean ui);
	jNothing EnableTrigger(jTrigger whichTrigger);
	jNothing EnableUserControl(jBoolean b);
	jNothing EnableUserUI(jBoolean b);
	jNothing EnableWeatherEffect(HWEATHEREFFECT whichEffect, jBoolean enable);
	jNothing EnableWorldFogBoundary(jBoolean b);
	jNothing EndCinematicScene();
	jNothing EndGame(jBoolean doScoreScreen);
	jNothing EndThematicMusic();
	jNothing EnumDestructablesInRect(HRECT r, HBOOLEXPR filter, jCode actionFunc);
	jNothing EnumItemsInRect(HRECT r, HBOOLEXPR filter, jCode actionFunc);
	jNothing ExecuteFunc(jString funcName);
	jNothing FillGuardPosts();
	HFILTERFUNC Filter(jCode func);
	jNothing FinishUbersplat(HUBERSPLAT whichSplat);
	HUNIT FirstOfGroup(HGROUP whichGroup);
	jNothing FlashQuestDialogButton();
	jNothing FlushChildHashtable(HHASHTABLE table, jInteger parentKey);
	jNothing FlushGameCache(HGAMECACHE cache);
	jNothing FlushParentHashtable(HHASHTABLE table);
	jNothing FlushStoredBoolean(HGAMECACHE cache, jString missionKey, jString key);
	jNothing FlushStoredInteger(HGAMECACHE cache, jString missionKey, jString key);
	jNothing FlushStoredMission(HGAMECACHE cache, jString missionKey);
	jNothing FlushStoredReal(HGAMECACHE cache, jString missionKey, jString key);
	jNothing FlushStoredString(HGAMECACHE cache, jString missionKey, jString key);
	jNothing FlushStoredUnit(HGAMECACHE cache, jString missionKey, jString key);
	jNothing FogEnable(jBoolean enable);
	jNothing FogMaskEnable(jBoolean enable);
	jNothing FogModifierStart(HFOGMODIFIER whichFogModifier);
	jNothing FogModifierStop(HFOGMODIFIER whichFogModifier);
	jNothing ForForce(HFORCE whichForce, jCode callback);
	jNothing ForGroup(HGROUP whichGroup, jCode callback);
	jNothing ForceAddPlayer(HFORCE whichForce, HPLAYER whichPlayer);
	jNothing ForceCampaignSelectScreen();
	jNothing ForceCinematicSubtitles(jBoolean flag);
	jNothing ForceClear(HFORCE whichForce);
	jNothing ForceEnumAllies(HFORCE whichForce, HPLAYER whichPlayer, HBOOLEXPR filter);
	jNothing ForceEnumEnemies(HFORCE whichForce, HPLAYER whichPlayer, HBOOLEXPR filter);
	jNothing ForceEnumPlayers(HFORCE whichForce, HBOOLEXPR filter);
	jNothing ForceEnumPlayersCounted(HFORCE whichForce, HBOOLEXPR filter, jInteger countLimit);
	jNothing ForcePlayerStartLocation(HPLAYER whichPlayer, jInteger startLocIndex);
	jNothing ForceQuestDialogUpdate();
	jNothing ForceRemovePlayer(HFORCE whichForce, HPLAYER whichPlayer);
	jNothing ForceUICancel();
	jNothing ForceUIKey(jString key);
	HAIDIFFICULTY GetAIDifficulty(HPLAYER num);
	jString GetAbilityEffect(jString abilityString, HEFFECTTYPE t, jInteger index);
	jString GetAbilityEffectById(jInteger abilityId, HEFFECTTYPE t, jInteger index);
	jString GetAbilitySound(jString abilityString, HSOUNDTYPE t);
	jString GetAbilitySoundById(jInteger abilityId, HSOUNDTYPE t);
	jInteger GetAiPlayer();
	HUNIT GetAllianceTarget();
	jInteger GetAllyColorFilterState();
	HUNIT GetAttacker();
	HUNIT GetBuilding(HPLAYER arg1);
	HUNIT GetBuyingUnit();
	jReal GetCameraBoundMaxX();
	jReal GetCameraBoundMaxY();
	jReal GetCameraBoundMinX();
	jReal GetCameraBoundMinY();
	HLOCATION GetCameraEyePositionLoc();
	jReal GetCameraEyePositionX();
	jReal GetCameraEyePositionY();
	jReal GetCameraEyePositionZ();
	jReal GetCameraField(ECameraField whichField);
	jReal GetCameraMargin(jInteger whichMargin);
	HLOCATION GetCameraTargetPositionLoc();
	jReal GetCameraTargetPositionX();
	jReal GetCameraTargetPositionY();
	jReal GetCameraTargetPositionZ();
	HUNIT GetCancelledStructure();
	HUNIT GetChangingUnit();
	HPLAYER GetChangingUnitPrevOwner();
	HBUTTON GetClickedButton();
	HDIALOG GetClickedDialog();
	HUNIT GetConstructedStructure();
	HUNIT GetConstructingStructure();
	HMAPDENSITY GetCreatureDensity();
	HUNIT GetCreepCamp(jInteger arg1, jInteger arg2, jBoolean arg3);
	jBoolean GetCreepCampFilterState();
	jBoolean GetCustomCampaignButtonVisible(jInteger whichButton);
	HUNIT GetDecayingUnit();
	HGAMEDIFFICULTY GetDefaultDifficulty();
	jReal GetDestructableLife(HDESTRUCTABLE d);
	jReal GetDestructableMaxLife(HDESTRUCTABLE d);
	jString GetDestructableName(HDESTRUCTABLE d);
	jReal GetDestructableOccluderHeight(HDESTRUCTABLE d);
	jInteger GetDestructableTypeId(HDESTRUCTABLE d);
	jReal GetDestructableX(HDESTRUCTABLE d);
	jReal GetDestructableY(HDESTRUCTABLE d);
	HUNIT GetDetectedUnit();
	HUNIT GetDyingUnit();
	HUNIT GetEnemyBase();
	HUNIT GetEnemyExpansion();
	jInteger GetEnemyPower();
	HUNIT GetEnteringUnit();
	HDESTRUCTABLE GetEnumDestructable();
	HITEM GetEnumItem();
	HPLAYER GetEnumPlayer();
	HUNIT GetEnumUnit();
	jReal GetEventDamage();
	HUNIT GetEventDamageSource();
	HPLAYER GetEventDetectingPlayer();
	HGAMESTATE GetEventGameState();
	jString GetEventPlayerChatString();
	jString GetEventPlayerChatStringMatched();
	HPLAYERSTATE GetEventPlayerState();
	HUNIT GetEventTargetUnit();
	HUNITSTATE GetEventUnitState();
	HUNIT GetExpansionFoe();
	HUNIT GetExpansionPeon();
	jInteger GetExpansionX();
	jInteger GetExpansionY();
	HTIMER GetExpiredTimer();
	HDESTRUCTABLE GetFilterDestructable();
	HITEM GetFilterItem();
	HPLAYER GetFilterPlayer();
	HUNIT GetFilterUnit();
	jReal GetFloatGameState(HFGAMESTATE whichFloatGameState);
	jInteger GetFoodMade(jInteger unitId);
	jInteger GetFoodUsed(jInteger unitId);
	HGAMEDIFFICULTY GetGameDifficulty();
	HPLACEMENT GetGamePlacement();
	HGAMESPEED GetGameSpeed();
	HGAMETYPE GetGameTypeSelected();
	jInteger GetGoldOwned();
	jInteger GetHandleId(HHANDLE2 h);
	jInteger GetHeroAgi(HUNIT whichHero, jBoolean includeBonuses);
	jInteger GetHeroId();
	jInteger GetHeroInt(HUNIT whichHero, jBoolean includeBonuses);
	jInteger GetHeroLevel(HUNIT whichHero);
	jInteger GetHeroLevelAI();
	jString GetHeroProperName(HUNIT whichHero);
	jInteger GetHeroSkillPoints(HUNIT whichHero);
	jInteger GetHeroStr(HUNIT whichHero, jBoolean includeBonuses);
	jInteger GetHeroXP(HUNIT whichHero);
	jInteger GetIntegerGameState(HIGAMESTATE whichIntegerGameState);
	jInteger GetIssuedOrderId();
	jInteger GetItemCharges(HITEM whichItem);
	jInteger GetItemLevel(HITEM whichItem);
	jString GetItemName(HITEM whichItem);
	HPLAYER GetItemPlayer(HITEM whichItem);
	HITEMTYPE GetItemType(HITEM whichItem);
	jInteger GetItemTypeId(HITEM i);
	jInteger GetItemUserData(HITEM whichItem);
	jReal GetItemX(HITEM i);
	jReal GetItemY(HITEM i);
	HUNIT GetKillingUnit();
	jInteger GetLastCommand();
	jInteger GetLastData();
	jInteger GetLearnedSkill();
	jInteger GetLearnedSkillLevel();
	HUNIT GetLearningUnit();
	HUNIT GetLeavingUnit();
	HUNIT GetLevelingUnit();
	jReal GetLightningColorA(HLIGHTNING whichBolt);
	jReal GetLightningColorB(HLIGHTNING whichBolt);
	jReal GetLightningColorG(HLIGHTNING whichBolt);
	jReal GetLightningColorR(HLIGHTNING whichBolt);
	HUNIT GetLoadedUnit();
	HPLAYER GetLocalPlayer();
	jInteger GetLocalizedHotkey(jString source);
	jString GetLocalizedString(jString source);
	jReal GetLocationX(HLOCATION whichLocation);
	jReal GetLocationY(HLOCATION whichLocation);
	jReal GetLocationZ(HLOCATION whichLocation);
	HITEM GetManipulatedItem();
	HUNIT GetManipulatingUnit();
	HUNIT GetMegaTarget();
	jInteger GetMinesOwned();
	jInteger GetNextExpansion();
	jString GetObjectName(jInteger objectId);
	HLOCATION GetOrderPointLoc();
	jReal GetOrderPointX();
	jReal GetOrderPointY();
	HWIDGET GetOrderTarget();
	HDESTRUCTABLE GetOrderTargetDestructable();
	HITEM GetOrderTargetItem();
	HUNIT GetOrderTargetUnit();
	HUNIT GetOrderedUnit();
	HPLAYER GetOwningPlayer(HUNIT whichUnit);
	jBoolean GetPlayerAlliance(HPLAYER sourcePlayer, HPLAYER otherPlayer, HALLIANCETYPE whichAllianceSetting);
	HPLAYERCOLOR GetPlayerColor(HPLAYER whichPlayer);
	HMAPCONTROL GetPlayerController(HPLAYER whichPlayer);
	jReal GetPlayerHandicap(HPLAYER whichPlayer);
	jReal GetPlayerHandicapXP(HPLAYER whichPlayer);
	jInteger GetPlayerId(HPLAYER whichPlayer);
	jString GetPlayerName(HPLAYER whichPlayer);
	HRACE GetPlayerRace(HPLAYER whichPlayer);
	jInteger GetPlayerScore(HPLAYER whichPlayer, HPLAYERSCORE whichPlayerScore);
	jBoolean GetPlayerSelectable(HPLAYER whichPlayer);
	HPLAYERSLOTSTATE GetPlayerSlotState(HPLAYER whichPlayer);
	jInteger GetPlayerStartLocation(HPLAYER whichPlayer);
	jReal GetPlayerStartLocationX(HPLAYER arg1);
	jReal GetPlayerStartLocationY(HPLAYER arg1);
	jInteger GetPlayerState(HPLAYER whichPlayer, HPLAYERSTATE whichPlayerState);
	jInteger GetPlayerStructureCount(HPLAYER whichPlayer, jBoolean includeIncomplete);
	jInteger GetPlayerTaxRate(HPLAYER sourcePlayer, HPLAYER otherPlayer, HPLAYERSTATE whichResource);
	jInteger GetPlayerTeam(HPLAYER whichPlayer);
	jInteger GetPlayerTechCount(HPLAYER whichPlayer, jInteger techid, jBoolean specificonly);
	jInteger GetPlayerTechMaxAllowed(HPLAYER whichPlayer, jInteger techid);
	jBoolean GetPlayerTechResearched(HPLAYER whichPlayer, jInteger techid, jBoolean specificonly);
	jInteger GetPlayerTypedUnitCount(HPLAYER whichPlayer, jString unitName, jBoolean includeIncomplete, jBoolean includeUpgrades);
	jInteger GetPlayerUnitCount(HPLAYER whichPlayer, jBoolean includeIncomplete);
	jInteger GetPlayerUnitTypeCount(HPLAYER arg1, jInteger arg2);
	jInteger GetPlayers();
	jInteger GetRandomInt(jInteger lowBound, jInteger highBound);
	jReal GetRandomReal(jReal* lowBound, jReal* highBound);
	jReal GetRectCenterX(HRECT whichRect);
	jReal GetRectCenterY(HRECT whichRect);
	jReal GetRectMaxX(HRECT whichRect);
	jReal GetRectMaxY(HRECT whichRect);
	jReal GetRectMinX(HRECT whichRect);
	jReal GetRectMinY(HRECT whichRect);
	HUNIT GetRescuer();
	jInteger GetResearched();
	HUNIT GetResearchingUnit();
	jInteger GetResourceAmount(HUNIT whichUnit);
	HMAPDENSITY GetResourceDensity();
	HUNIT GetRevivableUnit();
	HUNIT GetRevivingUnit();
	jString GetSaveBasicFilename();
	HUNIT GetSellingUnit();
	HITEM GetSoldItem();
	HUNIT GetSoldUnit();
	jInteger GetSoundDuration(HSOUND soundHandle);
	jInteger GetSoundFileDuration(jString musicFileName);
	jBoolean GetSoundIsLoading(HSOUND soundHandle);
	jBoolean GetSoundIsPlaying(HSOUND soundHandle);
	HABILITY GetSpellAbility();
	jInteger GetSpellAbilityId();
	HUNIT GetSpellAbilityUnit();
	HDESTRUCTABLE GetSpellTargetDestructable();
	HITEM GetSpellTargetItem();
	HLOCATION GetSpellTargetLoc();
	HUNIT GetSpellTargetUnit();
	jReal GetSpellTargetX();
	jReal GetSpellTargetY();
	HSTARTLOCPRIO GetStartLocPrio(jInteger whichStartLoc, jInteger prioSlotIndex);
	jInteger GetStartLocPrioSlot(jInteger whichStartLoc, jInteger prioSlotIndex);
	HLOCATION GetStartLocationLoc(jInteger whichStartLocation);
	jReal GetStartLocationX(jInteger whichStartLocation);
	jReal GetStartLocationY(jInteger whichStartLocation);
	jBoolean GetStoredBoolean(HGAMECACHE cache, jString missionKey, jString key);
	jInteger GetStoredInteger(HGAMECACHE cache, jString missionKey, jString key);
	jReal GetStoredReal(HGAMECACHE cache, jString missionKey, jString key);
	jString GetStoredString(HGAMECACHE cache, jString missionKey, jString key);
	HUNIT GetSummonedUnit();
	HUNIT GetSummoningUnit();
	jInteger GetTeams();
	jInteger GetTerrainCliffLevel(jReal* x, jReal* y);
	jInteger GetTerrainType(jReal* x, jReal* y);
	jInteger GetTerrainVariance(jReal* x, jReal* y);
	jReal GetTimeOfDayScale();
	HPLAYER GetTournamentFinishNowPlayer();
	jInteger GetTournamentFinishNowRule();
	jReal GetTournamentFinishSoonTimeRemaining();
	jInteger GetTournamentScore(HPLAYER whichPlayer);
	jInteger GetTownUnitCount(jInteger arg1, jInteger arg2, jBoolean arg3);
	HUNIT GetTrainedUnit();
	jInteger GetTrainedUnitType();
	HUNIT GetTransportUnit();
	HDESTRUCTABLE GetTriggerDestructable();
	jInteger GetTriggerEvalCount(jTrigger whichTrigger);
	HEVENTID GetTriggerEventId();
	jInteger GetTriggerExecCount(jTrigger whichTrigger);
	HPLAYER GetTriggerPlayer();
	HUNIT GetTriggerUnit();
	HWIDGET GetTriggerWidget();
	HREGION GetTriggeringRegion();
	HTRACKABLE GetTriggeringTrackable();
	jTrigger GetTriggeringTrigger();
	jInteger GetUnitAbilityLevel(HUNIT whichUnit, jInteger abilcode);
	jReal GetUnitAcquireRange(HUNIT whichUnit);
	jInteger GetUnitBuildTime(jInteger arg1);
	jInteger GetUnitCount(jInteger arg1);
	jInteger GetUnitCountDone(jInteger arg1);
	jInteger GetUnitCurrentOrder(HUNIT whichUnit);
	jReal GetUnitDefaultAcquireRange(HUNIT whichUnit);
	jReal GetUnitDefaultFlyHeight(HUNIT whichUnit);
	jReal GetUnitDefaultMoveSpeed(HUNIT whichUnit);
	jReal GetUnitDefaultPropWindow(HUNIT whichUnit);
	jReal GetUnitDefaultTurnSpeed(HUNIT whichUnit);
	jReal GetUnitFacing(HUNIT whichUnit);
	jReal GetUnitFlyHeight(HUNIT whichUnit);
	jInteger GetUnitFoodMade(HUNIT whichUnit);
	jInteger GetUnitFoodUsed(HUNIT whichUnit);
	jInteger GetUnitGoldCost(jInteger arg1);
	jInteger GetUnitLevel(HUNIT whichUnit);
	HLOCATION GetUnitLoc(HUNIT whichUnit);
	jReal GetUnitMoveSpeed(HUNIT whichUnit);
	jString GetUnitName(HUNIT whichUnit);
	jInteger GetUnitPointValue(HUNIT whichUnit);
	jInteger GetUnitPointValueByType(jInteger unitType);
	jReal GetUnitPropWindow(HUNIT whichUnit);
	HRACE GetUnitRace(HUNIT whichUnit);
	HDESTRUCTABLE GetUnitRallyDestructable(HUNIT whichUnit);
	HLOCATION GetUnitRallyPoint(HUNIT whichUnit);
	HUNIT GetUnitRallyUnit(HUNIT whichUnit);
	jReal GetUnitState(HUNIT whichUnit, HUNITSTATE whichUnitState);
	jReal GetUnitTurnSpeed(HUNIT whichUnit);
	jInteger GetUnitTypeId(HUNIT whichUnit);
	jInteger GetUnitUserData(HUNIT whichUnit);
	jInteger GetUnitWoodCost(jInteger arg1);
	jReal GetUnitX(HUNIT whichUnit);
	jReal GetUnitY(HUNIT whichUnit);
	jInteger GetUpgradeGoldCost(jInteger arg1);
	jInteger GetUpgradeLevel(jInteger arg1);
	jInteger GetUpgradeWoodCost(jInteger arg1);
	jReal GetWidgetLife(HWIDGET whichWidget);
	jReal GetWidgetX(HWIDGET whichWidget);
	jReal GetWidgetY(HWIDGET whichWidget);
	HPLAYER GetWinningPlayer();
	HRECT GetWorldBounds();
	jNothing GroupAddUnit(HGROUP whichGroup, HUNIT whichUnit);
	jNothing GroupClear(HGROUP whichGroup);
	jNothing GroupEnumUnitsInRange(HGROUP whichGroup, jReal* x, jReal* y, jReal* radius, HBOOLEXPR filter);
	jNothing GroupEnumUnitsInRangeCounted(HGROUP whichGroup, jReal* x, jReal* y, jReal* radius, HBOOLEXPR filter, jInteger countLimit);
	jNothing GroupEnumUnitsInRangeOfLoc(HGROUP whichGroup, HLOCATION whichLocation, jReal* radius, HBOOLEXPR filter);
	jNothing GroupEnumUnitsInRangeOfLocCounted(HGROUP whichGroup, HLOCATION whichLocation, jReal* radius, HBOOLEXPR filter, jInteger countLimit);
	jNothing GroupEnumUnitsInRect(HGROUP whichGroup, HRECT r, HBOOLEXPR filter);
	jNothing GroupEnumUnitsInRectCounted(HGROUP whichGroup, HRECT r, HBOOLEXPR filter, jInteger countLimit);
	jNothing GroupEnumUnitsOfPlayer(HGROUP whichGroup, HPLAYER whichPlayer, HBOOLEXPR filter);
	jNothing GroupEnumUnitsOfType(HGROUP whichGroup, jString unitname, HBOOLEXPR filter);
	jNothing GroupEnumUnitsOfTypeCounted(HGROUP whichGroup, jString unitname, HBOOLEXPR filter, jInteger countLimit);
	jNothing GroupEnumUnitsSelected(HGROUP whichGroup, HPLAYER whichPlayer, HBOOLEXPR filter);
	jBoolean GroupImmediateOrder(HGROUP whichGroup, jString order);
	jBoolean GroupImmediateOrderById(HGROUP whichGroup, jInteger order);
	jBoolean GroupPointOrder(HGROUP whichGroup, jString order, jReal* x, jReal* y);
	jBoolean GroupPointOrderById(HGROUP whichGroup, jInteger order, jReal* x, jReal* y);
	jBoolean GroupPointOrderByIdLoc(HGROUP whichGroup, jInteger order, HLOCATION whichLocation);
	jBoolean GroupPointOrderLoc(HGROUP whichGroup, jString order, HLOCATION whichLocation);
	jNothing GroupRemoveUnit(HGROUP whichGroup, HUNIT whichUnit);
	jBoolean GroupTargetOrder(HGROUP whichGroup, jString order, HWIDGET targetWidget);
	jBoolean GroupTargetOrderById(HGROUP whichGroup, jInteger order, HWIDGET targetWidget);
	jNothing GroupTimedLife(jBoolean arg1);
	jNothing HarvestGold(jInteger arg1, jInteger arg2);
	jNothing HarvestWood(jInteger arg1, jInteger arg2);
	jBoolean HaveSavedBoolean(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	jBoolean HaveSavedHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	jBoolean HaveSavedInteger(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	jBoolean HaveSavedReal(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	jBoolean HaveSavedString(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	jBoolean HaveStoredBoolean(HGAMECACHE cache, jString missionKey, jString key);
	jBoolean HaveStoredInteger(HGAMECACHE cache, jString missionKey, jString key);
	jBoolean HaveStoredReal(HGAMECACHE cache, jString missionKey, jString key);
	jBoolean HaveStoredString(HGAMECACHE cache, jString missionKey, jString key);
	jBoolean HaveStoredUnit(HGAMECACHE cache, jString missionKey, jString key);
	jReal I2R(jInteger i);
	jString I2S(jInteger i);
	jInteger IgnoredUnits(jInteger arg1);
	jInteger IncUnitAbilityLevel(HUNIT whichUnit, jInteger abilcode);
	jNothing InitAssault();
	HGAMECACHE InitGameCache(jString campaignFile);
	HHASHTABLE InitHashtable();
	jBoolean IsCineFilterDisplayed();
	jBoolean IsDestructableInvulnerable(HDESTRUCTABLE d);
	jBoolean IsFogEnabled();
	jBoolean IsFogMaskEnabled();
	jBoolean IsFoggedToPlayer(jReal* x, jReal* y, HPLAYER whichPlayer);
	jBoolean IsGameTypeSupported(HGAMETYPE whichGameType);
	jBoolean IsHeroUnitId(jInteger unitId);
	jBoolean IsItemIdPawnable(jInteger itemId);
	jBoolean IsItemIdPowerup(jInteger itemId);
	jBoolean IsItemIdSellable(jInteger itemId);
	jBoolean IsItemInvulnerable(HITEM whichItem);
	jBoolean IsItemOwned(HITEM whichItem);
	jBoolean IsItemPawnable(HITEM whichItem);
	jBoolean IsItemPowerup(HITEM whichItem);
	jBoolean IsItemSellable(HITEM whichItem);
	jBoolean IsItemVisible(HITEM whichItem);
	jBoolean IsLeaderboardDisplayed(HLEADERBOARD lb);
	jBoolean IsLocationFoggedToPlayer(HLOCATION whichLocation, HPLAYER whichPlayer);
	jBoolean IsLocationInRegion(HREGION whichRegion, HLOCATION whichLocation);
	jBoolean IsLocationMaskedToPlayer(HLOCATION whichLocation, HPLAYER whichPlayer);
	jBoolean IsLocationVisibleToPlayer(HLOCATION whichLocation, HPLAYER whichPlayer);
	jBoolean IsMapFlagSet(HMAPFLAG whichMapFlag);
	jBoolean IsMaskedToPlayer(jReal* x, jReal* y, HPLAYER whichPlayer);
	jBoolean IsMultiboardDisplayed(HMULTIBOARD lb);
	jBoolean IsMultiboardMinimized(HMULTIBOARD lb);
	jBoolean IsNoDefeatCheat();
	jBoolean IsNoVictoryCheat();
	jBoolean IsPlayerAlly(HPLAYER whichPlayer, HPLAYER otherPlayer);
	jBoolean IsPlayerEnemy(HPLAYER whichPlayer, HPLAYER otherPlayer);
	jBoolean IsPlayerInForce(HPLAYER whichPlayer, HFORCE whichForce);
	jBoolean IsPlayerObserver(HPLAYER whichPlayer);
	jBoolean IsPlayerRacePrefSet(HPLAYER whichPlayer, HRACEPREFERENCE pref);
	jBoolean IsPointBlighted(jReal* x, jReal* y);
	jBoolean IsPointInRegion(HREGION whichRegion, jReal* x, jReal* y);
	jBoolean IsQuestCompleted(HQUEST whichQuest);
	jBoolean IsQuestDiscovered(HQUEST whichQuest);
	jBoolean IsQuestEnabled(HQUEST whichQuest);
	jBoolean IsQuestFailed(HQUEST whichQuest);
	jBoolean IsQuestItemCompleted(HQUESTITEM whichQuestItem);
	jBoolean IsQuestRequired(HQUEST whichQuest);
	jBoolean IsSuspendedXP(HUNIT whichHero);
	jBoolean IsTerrainPathable(jReal* x, jReal* y, HPATHINGTYPE t);
	jBoolean IsTimerDialogDisplayed(HTIMERDIALOG whichDialog);
	jBoolean IsTowered(HUNIT arg1);
	jBoolean IsTriggerEnabled(jTrigger whichTrigger);
	jBoolean IsTriggerWaitOnSleeps(jTrigger whichTrigger);
	jBoolean IsUnit(HUNIT whichUnit, HUNIT whichSpecifiedUnit);
	jBoolean IsUnitAlly(HUNIT whichUnit, HPLAYER whichPlayer);
	jBoolean IsUnitDetected(HUNIT whichUnit, HPLAYER whichPlayer);
	jBoolean IsUnitEnemy(HUNIT whichUnit, HPLAYER whichPlayer);
	jBoolean IsUnitFogged(HUNIT whichUnit, HPLAYER whichPlayer);
	jBoolean IsUnitHidden(HUNIT whichUnit);
	jBoolean IsUnitIdType(jInteger unitId, HUNITTYPE whichUnitType);
	jBoolean IsUnitIllusion(HUNIT whichUnit);
	jBoolean IsUnitInForce(HUNIT whichUnit, HFORCE whichForce);
	jBoolean IsUnitInGroup(HUNIT whichUnit, HGROUP whichGroup);
	jBoolean IsUnitInRange(HUNIT whichUnit, HUNIT otherUnit, jReal* distance);
	jBoolean IsUnitInRangeLoc(HUNIT whichUnit, HLOCATION whichLocation, jReal* distance);
	jBoolean IsUnitInRangeXY(HUNIT whichUnit, jReal* x, jReal* y, jReal* distance);
	jBoolean IsUnitInRegion(HREGION whichRegion, HUNIT whichUnit);
	jBoolean IsUnitInTransport(HUNIT whichUnit, HUNIT whichTransport);
	jBoolean IsUnitInvisible(HUNIT whichUnit, HPLAYER whichPlayer);
	jBoolean IsUnitLoaded(HUNIT whichUnit);
	jBoolean IsUnitMasked(HUNIT whichUnit, HPLAYER whichPlayer);
	jBoolean IsUnitOwnedByPlayer(HUNIT whichUnit, HPLAYER whichPlayer);
	jBoolean IsUnitPaused(HUNIT whichHero);
	jBoolean IsUnitRace(HUNIT whichUnit, HRACE whichRace);
	jBoolean IsUnitSelected(HUNIT whichUnit, HPLAYER whichPlayer);
	jBoolean IsUnitType(HUNIT whichUnit, HUNITTYPE whichUnitType);
	jBoolean IsUnitVisible(HUNIT whichUnit, HPLAYER whichPlayer);
	jBoolean IsVisibleToPlayer(jReal* x, jReal* y, HPLAYER whichPlayer);
	jBoolean IssueBuildOrder(HUNIT whichPeon, jString unitToBuild, jReal* x, jReal* y);
	jBoolean IssueBuildOrderById(HUNIT whichPeon, jInteger unitId, jReal* x, jReal* y);
	jBoolean IssueImmediateOrder(HUNIT whichUnit, jString order);
	jBoolean IssueImmediateOrderById(HUNIT whichUnit, jInteger order);
	jBoolean IssueInstantPointOrder(HUNIT whichUnit, jString order, jReal* x, jReal* y, HWIDGET instantTargetWidget);
	jBoolean IssueInstantPointOrderById(HUNIT whichUnit, jInteger order, jReal* x, jReal* y, HWIDGET instantTargetWidget);
	jBoolean IssueInstantTargetOrder(HUNIT whichUnit, jString order, HWIDGET targetWidget, HWIDGET instantTargetWidget);
	jBoolean IssueInstantTargetOrderById(HUNIT whichUnit, jInteger order, HWIDGET targetWidget, HWIDGET instantTargetWidget);
	jBoolean IssueNeutralImmediateOrder(HPLAYER forWhichPlayer, HUNIT neutralStructure, jString unitToBuild);
	jBoolean IssueNeutralImmediateOrderById(HPLAYER forWhichPlayer, HUNIT neutralStructure, jInteger unitId);
	jBoolean IssueNeutralPointOrder(HPLAYER forWhichPlayer, HUNIT neutralStructure, jString unitToBuild, jReal* x, jReal* y);
	jBoolean IssueNeutralPointOrderById(HPLAYER forWhichPlayer, HUNIT neutralStructure, jInteger unitId, jReal* x, jReal* y);
	jBoolean IssueNeutralTargetOrder(HPLAYER forWhichPlayer, HUNIT neutralStructure, jString unitToBuild, HWIDGET target);
	jBoolean IssueNeutralTargetOrderById(HPLAYER forWhichPlayer, HUNIT neutralStructure, jInteger unitId, HWIDGET target);
	jBoolean IssuePointOrder(HUNIT whichUnit, jString order, jReal* x, jReal* y);
	jBoolean IssuePointOrderById(HUNIT whichUnit, jInteger order, jReal* x, jReal* y);
	jBoolean IssuePointOrderByIdLoc(HUNIT whichUnit, jInteger order, HLOCATION whichLocation);
	jBoolean IssuePointOrderLoc(HUNIT whichUnit, jString order, HLOCATION whichLocation);
	jBoolean IssueTargetOrder(HUNIT whichUnit, jString order, HWIDGET targetWidget);
	jBoolean IssueTargetOrderById(HUNIT whichUnit, jInteger order, HWIDGET targetWidget);
	jNothing ItemPoolAddItemType(HITEMPOOL whichItemPool, jInteger itemId, jReal* weight);
	jNothing ItemPoolRemoveItemType(HITEMPOOL whichItemPool, jInteger itemId);
	jNothing KillDestructable(HDESTRUCTABLE d);
	jNothing KillSoundWhenDone(HSOUND soundHandle);
	jNothing KillUnit(HUNIT whichUnit);
	jNothing LeaderboardAddItem(HLEADERBOARD lb, jString label, jInteger value, HPLAYER p);
	jNothing LeaderboardClear(HLEADERBOARD lb);
	jNothing LeaderboardDisplay(HLEADERBOARD lb, jBoolean show);
	jInteger LeaderboardGetItemCount(HLEADERBOARD lb);
	jString LeaderboardGetLabelText(HLEADERBOARD lb);
	jInteger LeaderboardGetPlayerIndex(HLEADERBOARD lb, HPLAYER p);
	jBoolean LeaderboardHasPlayerItem(HLEADERBOARD lb, HPLAYER p);
	jNothing LeaderboardRemoveItem(HLEADERBOARD lb, jInteger index);
	jNothing LeaderboardRemovePlayerItem(HLEADERBOARD lb, HPLAYER p);
	jNothing LeaderboardSetItemLabel(HLEADERBOARD lb, jInteger whichItem, jString val);
	jNothing LeaderboardSetItemLabelColor(HLEADERBOARD lb, jInteger whichItem, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	jNothing LeaderboardSetItemStyle(HLEADERBOARD lb, jInteger whichItem, jBoolean showLabel, jBoolean showValue, jBoolean showIcon);
	jNothing LeaderboardSetItemValue(HLEADERBOARD lb, jInteger whichItem, jInteger val);
	jNothing LeaderboardSetItemValueColor(HLEADERBOARD lb, jInteger whichItem, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	jNothing LeaderboardSetLabel(HLEADERBOARD lb, jString label);
	jNothing LeaderboardSetLabelColor(HLEADERBOARD lb, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	jNothing LeaderboardSetSizeByItemCount(HLEADERBOARD lb, jInteger count);
	jNothing LeaderboardSetStyle(HLEADERBOARD lb, jBoolean showLabel, jBoolean showNames, jBoolean showValues, jBoolean showIcons);
	jNothing LeaderboardSetValueColor(HLEADERBOARD lb, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	jNothing LeaderboardSortItemsByLabel(HLEADERBOARD lb, jBoolean ascending);
	jNothing LeaderboardSortItemsByPlayer(HLEADERBOARD lb, jBoolean ascending);
	jNothing LeaderboardSortItemsByValue(HLEADERBOARD lb, jBoolean ascending);
	HABILITY LoadAbilityHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	jBoolean LoadBoolean(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HBOOLEXPR LoadBooleanExprHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HBUTTON LoadButtonHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HDEFEATCONDITION LoadDefeatConditionHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HDESTRUCTABLE LoadDestructableHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HDIALOG LoadDialogHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HEFFECT LoadEffectHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HFOGMODIFIER LoadFogModifierHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HFOGSTATE LoadFogStateHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HFORCE LoadForceHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	jNothing LoadGame(jString saveFileName, jBoolean doScoreScreen);
	HGROUP LoadGroupHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HHASHTABLE LoadHashtableHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HIMAGE LoadImageHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	jInteger LoadInteger(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HITEM LoadItemHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HITEMPOOL LoadItemPoolHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HLEADERBOARD LoadLeaderboardHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HLIGHTNING LoadLightningHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HLOCATION LoadLocationHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HMULTIBOARD LoadMultiboardHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HMULTIBOARDITEM LoadMultiboardItemHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HPLAYER LoadPlayerHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HQUEST LoadQuestHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HQUESTITEM LoadQuestItemHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	jReal LoadReal(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HRECT LoadRectHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HREGION LoadRegionHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HSOUND LoadSoundHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	jString LoadStr(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HTEXTTAG LoadTextTagHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HTIMERDIALOG LoadTimerDialogHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HTIMER LoadTimerHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HTRACKABLE LoadTrackableHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HTRIGGERACTION LoadTriggerActionHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HTRIGGERCONDITION LoadTriggerConditionHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HEVENT LoadTriggerEventHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	jTrigger LoadTriggerHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HUBERSPLAT LoadUbersplatHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HUNIT LoadUnitHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HUNITPOOL LoadUnitPoolHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	HWIDGET LoadWidgetHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	jNothing LoadZepWave(jInteger arg1, jInteger arg2);
	HLOCATION Location(jReal* x, jReal* y);
	jInteger MeleeDifficulty();
	jBoolean MergeUnits(jInteger arg1, jInteger arg2, jInteger arg3, jInteger arg4);
	jBoolean MoveLightning(HLIGHTNING whichBolt, jBoolean checkVisibility, jReal* x1, jReal* y1, jReal* x2, jReal* y2);
	jBoolean MoveLightningEx(HLIGHTNING whichBolt, jBoolean checkVisibility, jReal* x1, jReal* y1, jReal* z1, jReal* x2, jReal* y2, jReal* z2);
	jNothing MoveLocation(HLOCATION whichLocation, jReal* newX, jReal* newY);
	jNothing MoveRectTo(HRECT whichRect, jReal* newCenterX, jReal* newCenterY);
	jNothing MoveRectToLoc(HRECT whichRect, HLOCATION newCenterLoc);
	jNothing MultiboardClear(HMULTIBOARD lb);
	jNothing MultiboardDisplay(HMULTIBOARD lb, jBoolean show);
	jInteger MultiboardGetColumnCount(HMULTIBOARD lb);
	HMULTIBOARDITEM MultiboardGetItem(HMULTIBOARD lb, jInteger row, jInteger column);
	jInteger MultiboardGetRowCount(HMULTIBOARD lb);
	jString MultiboardGetTitleText(HMULTIBOARD lb);
	jNothing MultiboardMinimize(HMULTIBOARD lb, jBoolean minimize);
	jNothing MultiboardReleaseItem(HMULTIBOARDITEM mbi);
	jNothing MultiboardSetColumnCount(HMULTIBOARD lb, jInteger count);
	jNothing MultiboardSetItemIcon(HMULTIBOARDITEM mbi, jString iconFileName);
	jNothing MultiboardSetItemStyle(HMULTIBOARDITEM mbi, jBoolean showValue, jBoolean showIcon);
	jNothing MultiboardSetItemValue(HMULTIBOARDITEM mbi, jString val);
	jNothing MultiboardSetItemValueColor(HMULTIBOARDITEM mbi, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	jNothing MultiboardSetItemWidth(HMULTIBOARDITEM mbi, jReal* width);
	jNothing MultiboardSetItemsIcon(HMULTIBOARD lb, jString iconPath);
	jNothing MultiboardSetItemsStyle(HMULTIBOARD lb, jBoolean showValues, jBoolean showIcons);
	jNothing MultiboardSetItemsValue(HMULTIBOARD lb, jString value);
	jNothing MultiboardSetItemsValueColor(HMULTIBOARD lb, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	jNothing MultiboardSetItemsWidth(HMULTIBOARD lb, jReal* width);
	jNothing MultiboardSetRowCount(HMULTIBOARD lb, jInteger count);
	jNothing MultiboardSetTitleText(HMULTIBOARD lb, jString label);
	jNothing MultiboardSetTitleTextColor(HMULTIBOARD lb, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	jNothing MultiboardSuppressDisplay(jBoolean flag);
	jNothing NewSoundEnvironment(jString environmentName);
	HBOOLEXPR Not(HBOOLEXPR operand);
	HBOOLEXPR Or(HBOOLEXPR operandA, HBOOLEXPR operandB);
	jInteger OrderId(jString orderIdString);
	jString OrderId2String(jInteger orderId);
	jNothing PanCameraTo(jReal* x, jReal* y);
	jNothing PanCameraToTimed(jReal* x, jReal* y, jReal* duration);
	jNothing PanCameraToTimedWithZ(jReal* x, jReal* y, jReal* zOffsetDest, jReal* duration);
	jNothing PanCameraToWithZ(jReal* x, jReal* y, jReal* zOffsetDest);
	jNothing PauseCompAI(HPLAYER p, jBoolean pause);
	jNothing PauseGame(jBoolean flag);
	jNothing PauseTimer(HTIMER whichTimer);
	jNothing PauseUnit(HUNIT whichUnit, jBoolean flag);
	jNothing PingMinimap(jReal* x, jReal* y, jReal* duration);
	jNothing PingMinimapEx(jReal* x, jReal* y, jReal* duration, jInteger red, jInteger green, jInteger blue, jBoolean extraEffects);
	HITEM PlaceRandomItem(HITEMPOOL whichItemPool, jReal* x, jReal* y);
	HUNIT PlaceRandomUnit(HUNITPOOL whichPool, HPLAYER forWhichPlayer, jReal* x, jReal* y, jReal* facing);
	jNothing PlayCinematic(jString movieName);
	jNothing PlayModelCinematic(jString modelName);
	jNothing PlayMusic(jString musicName);
	jNothing PlayMusicEx(jString musicName, jInteger frommsecs, jInteger fadeinmsecs);
	jNothing PlayThematicMusic(jString musicFileName);
	jNothing PlayThematicMusicEx(jString musicFileName, jInteger frommsecs);
	HPLAYER Player(jInteger number);
	HLEADERBOARD PlayerGetLeaderboard(HPLAYER toPlayer);
	jNothing PlayerSetLeaderboard(HPLAYER toPlayer, HLEADERBOARD lb);
	jNothing PopLastCommand();
	jReal Pow(jReal* x, jReal* power);
	jNothing Preload(jString filename);
	jNothing PreloadEnd(jReal* timeout);
	jNothing PreloadEndEx();
	jNothing PreloadGenClear();
	jNothing PreloadGenEnd(jString filename);
	jNothing PreloadGenStart();
	jNothing PreloadRefresh();
	jNothing PreloadStart();
	jNothing Preloader(jString filename);
	jNothing PurchaseZeppelin();
	HQUESTITEM QuestCreateItem(HQUEST whichQuest);
	jNothing QuestItemSetCompleted(HQUESTITEM whichQuestItem, jBoolean completed);
	jNothing QuestItemSetDescription(HQUESTITEM whichQuestItem, jString description);
	jNothing QuestSetCompleted(HQUEST whichQuest, jBoolean completed);
	jNothing QuestSetDescription(HQUEST whichQuest, jString description);
	jNothing QuestSetDiscovered(HQUEST whichQuest, jBoolean discovered);
	jNothing QuestSetEnabled(HQUEST whichQuest, jBoolean enabled);
	jNothing QuestSetFailed(HQUEST whichQuest, jBoolean failed);
	jNothing QuestSetIconPath(HQUEST whichQuest, jString iconPath);
	jNothing QuestSetRequired(HQUEST whichQuest, jBoolean required);
	jNothing QuestSetTitle(HQUEST whichQuest, jString title);
	jNothing QueueDestructableAnimation(HDESTRUCTABLE d, jString whichAnimation);
	jNothing QueueUnitAnimation(HUNIT whichUnit, jString whichAnimation);
	jInteger R2I(jReal* r);
	jString R2S(jReal* r);
	jString R2SW(jReal* r, jInteger width, jInteger precision);
	jReal Rad2Deg(jReal* radians);
	HRECT Rect(jReal* minx, jReal* miny, jReal* maxx, jReal* maxy);
	HRECT RectFromLoc(HLOCATION min, HLOCATION max);
	jNothing RecycleGuardPosition(HUNIT hUnit);
	jNothing RegionAddCell(HREGION whichRegion, jReal* x, jReal* y);
	jNothing RegionAddCellAtLoc(HREGION whichRegion, HLOCATION whichLocation);
	jNothing RegionAddRect(HREGION whichRegion, HRECT r);
	jNothing RegionClearCell(HREGION whichRegion, jReal* x, jReal* y);
	jNothing RegionClearCellAtLoc(HREGION whichRegion, HLOCATION whichLocation);
	jNothing RegionClearRect(HREGION whichRegion, HRECT r);
	jNothing RegisterStackedSound(HSOUND soundHandle, jBoolean byPosition, jReal* rectwidth, jReal* rectheight);
	jNothing ReloadGame();
	jBoolean ReloadGameCachesFromDisk();
	jNothing RemoveAllGuardPositions(HPLAYER num);
	jNothing RemoveDestructable(HDESTRUCTABLE d);
	jNothing RemoveGuardPosition(HUNIT hUnit);
	jNothing RemoveInjuries();
	jNothing RemoveItem(HITEM whichItem);
	jNothing RemoveItemFromAllStock(jInteger itemId);
	jNothing RemoveItemFromStock(HUNIT whichUnit, jInteger itemId);
	jNothing RemoveLocation(HLOCATION whichLocation);
	jNothing RemovePlayer(HPLAYER whichPlayer, HPLAYERGAMERESULT gameResult);
	jNothing RemoveRect(HRECT whichRect);
	jNothing RemoveRegion(HREGION whichRegion);
	jBoolean RemoveSaveDirectory(jString sourceDirName);
	jNothing RemoveSavedBoolean(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	jNothing RemoveSavedHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	jNothing RemoveSavedInteger(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	jNothing RemoveSavedReal(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	jNothing RemoveSavedString(HHASHTABLE table, jInteger parentKey, jInteger childKey);
	jNothing RemoveSiege();
	jNothing RemoveUnit(HUNIT whichUnit);
	jNothing RemoveUnitFromAllStock(jInteger unitId);
	jNothing RemoveUnitFromStock(HUNIT whichUnit, jInteger unitId);
	jNothing RemoveWeatherEffect(HWEATHEREFFECT whichEffect);
	jBoolean RenameSaveDirectory(jString sourceDirName, jString destDirName);
	jNothing ResetCaptainLocs();
	jNothing ResetTerrainFog();
	jNothing ResetToGameCamera(jReal* duration);
	jNothing ResetTrigger(jTrigger whichTrigger);
	jNothing ResetUbersplat(HUBERSPLAT whichSplat);
	jNothing ResetUnitLookAt(HUNIT whichUnit);
	jNothing RestartGame(jBoolean doScoreScreen);
	HUNIT RestoreUnit(HGAMECACHE cache, jString missionKey, jString key, HPLAYER forWhichPlayer, jReal* x, jReal* y, jReal* facing);
	jNothing ResumeMusic();
	jNothing ResumeTimer(HTIMER whichTimer);
	jNothing ReturnGuardPosts();
	jBoolean ReviveHero(HUNIT whichHero, jReal* x, jReal* y, jBoolean doEyecandy);
	jBoolean ReviveHeroLoc(HUNIT whichHero, HLOCATION loc, jBoolean doEyecandy);
	jInteger S2I(jString s);
	jReal S2R(jString s);
	jBoolean SaveAbilityHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HABILITY whichAbility);
	jBoolean SaveAgentHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HAGENT whichAgent);
	jNothing SaveBoolean(HHASHTABLE table, jInteger parentKey, jInteger childKey, jBoolean value);
	jBoolean SaveBooleanExprHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HBOOLEXPR whichBoolexpr);
	jBoolean SaveButtonHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HBUTTON whichButton);
	jBoolean SaveDefeatConditionHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HDEFEATCONDITION whichDefeatcondition);
	jBoolean SaveDestructableHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HDESTRUCTABLE whichDestructable);
	jBoolean SaveDialogHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HDIALOG whichDialog);
	jBoolean SaveEffectHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HEFFECT whichEffect);
	jBoolean SaveFogModifierHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HFOGMODIFIER whichFogModifier);
	jBoolean SaveFogStateHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HFOGSTATE whichFogState);
	jBoolean SaveForceHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HFORCE whichForce);
	jNothing SaveGame(jString saveFileName);
	jBoolean SaveGameCache(HGAMECACHE whichCache);
	jBoolean SaveGameExists(jString saveName);
	jBoolean SaveGroupHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HGROUP whichGroup);
	jBoolean SaveHashtableHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HHASHTABLE whichHashtable);
	jBoolean SaveImageHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HIMAGE whichImage);
	jNothing SaveInteger(HHASHTABLE table, jInteger parentKey, jInteger childKey, jInteger value);
	jBoolean SaveItemHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HITEM whichItem);
	jBoolean SaveItemPoolHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HITEMPOOL whichItempool);
	jBoolean SaveLeaderboardHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HLEADERBOARD whichLeaderboard);
	jBoolean SaveLightningHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HLIGHTNING whichLightning);
	jBoolean SaveLocationHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HLOCATION whichLocation);
	jBoolean SaveMultiboardHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HMULTIBOARD whichMultiboard);
	jBoolean SaveMultiboardItemHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HMULTIBOARDITEM whichMultiboarditem);
	jBoolean SavePlayerHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HPLAYER whichPlayer);
	jBoolean SaveQuestHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HQUEST whichQuest);
	jBoolean SaveQuestItemHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HQUESTITEM whichQuestitem);
	jNothing SaveReal(HHASHTABLE table, jInteger parentKey, jInteger childKey, jReal* value);
	jBoolean SaveRectHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HRECT whichRect);
	jBoolean SaveRegionHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HREGION whichRegion);
	jBoolean SaveSoundHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HSOUND whichSound);
	jBoolean SaveStr(HHASHTABLE table, jInteger parentKey, jInteger childKey, jString value);
	jBoolean SaveTextTagHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HTEXTTAG whichTexttag);
	jBoolean SaveTimerDialogHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HTIMERDIALOG whichTimerdialog);
	jBoolean SaveTimerHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HTIMER whichTimer);
	jBoolean SaveTrackableHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HTRACKABLE whichTrackable);
	jBoolean SaveTriggerActionHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HTRIGGERACTION whichTriggeraction);
	jBoolean SaveTriggerConditionHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HTRIGGERCONDITION whichTriggercondition);
	jBoolean SaveTriggerEventHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HEVENT whichEvent);
	jBoolean SaveTriggerHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, jTrigger whichTrigger);
	jBoolean SaveUbersplatHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HUBERSPLAT whichUbersplat);
	jBoolean SaveUnitHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HUNIT whichUnit);
	jBoolean SaveUnitPoolHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HUNITPOOL whichUnitpool);
	jBoolean SaveWidgetHandle(HHASHTABLE table, jInteger parentKey, jInteger childKey, HWIDGET whichWidget);
	jNothing SelectHeroSkill(HUNIT whichHero, jInteger abilcode);
	jNothing SelectUnit(HUNIT whichUnit, jBoolean flag);
	jNothing SetAllItemTypeSlots(jInteger slots);
	jNothing SetAllUnitTypeSlots(jInteger slots);
	jNothing SetAllianceTarget(HUNIT arg1);
	jNothing SetAllyColorFilterState(jInteger state);
	jNothing SetAltMinimapIcon(jString iconPath);
	jNothing SetAmphibious();
	jNothing SetBlight(HPLAYER whichPlayer, jReal* x, jReal* y, jReal* radius, jBoolean addBlight);
	jNothing SetBlightLoc(HPLAYER whichPlayer, HLOCATION whichLocation, jReal* radius, jBoolean addBlight);
	jNothing SetBlightPoint(HPLAYER whichPlayer, jReal* x, jReal* y, jBoolean addBlight);
	jNothing SetBlightRect(HPLAYER whichPlayer, HRECT r, jBoolean addBlight);
	jNothing SetCameraBounds(jReal* x1, jReal* y1, jReal* x2, jReal* y2, jReal* x3, jReal* y3, jReal* x4, jReal* y4);
	jNothing SetCameraField(ECameraField whichField, jReal* value, jReal* duration);
	jNothing SetCameraOrientController(HUNIT whichUnit, jReal* xoffset, jReal* yoffset);
	jNothing SetCameraPosition(jReal* x, jReal* y);
	jNothing SetCameraQuickPosition(jReal* x, jReal* y);
	jNothing SetCameraRotateMode(jReal* x, jReal* y, jReal* radiansToSweep, jReal* duration);
	jNothing SetCameraTargetController(HUNIT whichUnit, jReal* xoffset, jReal* yoffset, jBoolean inheritOrientation);
	jNothing SetCampaignAI();
	jNothing SetCampaignAvailable(jInteger campaignNumber, jBoolean available);
	jNothing SetCampaignMenuRace(HRACE r);
	jNothing SetCampaignMenuRaceEx(jInteger campaignIndex);
	jNothing SetCaptainChanges(jBoolean arg1);
	jNothing SetCaptainHome(jInteger arg1, jReal* arg2, jReal* arg3);
	jNothing SetCineFilterBlendMode(HBLENDMODE whichMode);
	jNothing SetCineFilterDuration(jReal* duration);
	jNothing SetCineFilterEndColor(jInteger red, jInteger green, jInteger blue, jInteger alpha);
	jNothing SetCineFilterEndUV(jReal* minu, jReal* minv, jReal* maxu, jReal* maxv);
	jNothing SetCineFilterStartColor(jInteger red, jInteger green, jInteger blue, jInteger alpha);
	jNothing SetCineFilterStartUV(jReal* minu, jReal* minv, jReal* maxu, jReal* maxv);
	jNothing SetCineFilterTexMapFlags(HTEXMAPFLAGS whichFlags);
	jNothing SetCineFilterTexture(jString filename);
	jNothing SetCinematicCamera(jString cameraModelFile);
	jNothing SetCinematicScene(jInteger portraitUnitId, HPLAYERCOLOR color, jString speakerTitle, jString text, jReal* sceneDuration, jReal* voiceoverDuration);
	jNothing SetCreatureDensity(HMAPDENSITY whichdensity);
	jNothing SetCreepCampFilterState(jBoolean state);
	jNothing SetCustomCampaignButtonVisible(jInteger whichButton, jBoolean visible);
	jNothing SetDayNightModels(jString terrainDNCFile, jString unitDNCFile);
	jNothing SetDefaultDifficulty(HGAMEDIFFICULTY g);
	jNothing SetDefendPlayer(jBoolean arg1);
	jNothing SetDestructableAnimation(HDESTRUCTABLE d, jString whichAnimation);
	jNothing SetDestructableAnimationSpeed(HDESTRUCTABLE d, jReal* speedFactor);
	jNothing SetDestructableInvulnerable(HDESTRUCTABLE d, jBoolean flag);
	jNothing SetDestructableLife(HDESTRUCTABLE d, jReal* life);
	jNothing SetDestructableMaxLife(HDESTRUCTABLE d, jReal* max);
	jNothing SetDestructableOccluderHeight(HDESTRUCTABLE d, jReal* height);
	jNothing SetDoodadAnimation(jReal* x, jReal* y, jReal* radius, jInteger doodadID, jBoolean nearestOnly, jString animName, jBoolean animRandom);
	jNothing SetDoodadAnimationRect(HRECT r, jInteger doodadID, jString animName, jBoolean animRandom);
	jNothing SetEdCinematicAvailable(jInteger campaignNumber, jBoolean available);
	jBoolean SetExpansion(HUNIT arg1, jInteger arg2);
	jNothing SetFloatGameState(HFGAMESTATE whichFloatGameState, jReal* value);
	jNothing SetFogStateRadius(HPLAYER forWhichPlayer, HFOGSTATE whichState, jReal* centerx, jReal* centerY, jReal* radius, jBoolean useSharedVision);
	jNothing SetFogStateRadiusLoc(HPLAYER forWhichPlayer, HFOGSTATE whichState, HLOCATION center, jReal* radius, jBoolean useSharedVision);
	jNothing SetFogStateRect(HPLAYER forWhichPlayer, HFOGSTATE whichState, HRECT where, jBoolean useSharedVision);
	jNothing SetGameDifficulty(HGAMEDIFFICULTY whichdifficulty);
	jNothing SetGamePlacement(HPLACEMENT whichPlacementType);
	jNothing SetGameSpeed(HGAMESPEED whichspeed);
	jNothing SetGameTypeSupported(HGAMETYPE whichGameType, jBoolean value);
	jNothing SetGroupsFlee(jBoolean arg1);
	jNothing SetHeroAgi(HUNIT whichHero, jInteger newAgi, jBoolean permanent);
	jNothing SetHeroInt(HUNIT whichHero, jInteger newInt, jBoolean permanent);
	jNothing SetHeroLevel(HUNIT whichHero, jInteger level, jBoolean showEyeCandy);
	jNothing SetHeroLevels(jCode arg1);
	jNothing SetHeroStr(HUNIT whichHero, jInteger newStr, jBoolean permanent);
	jNothing SetHeroXP(HUNIT whichHero, jInteger newXpVal, jBoolean showEyeCandy);
	jNothing SetHeroesBuyItems(jBoolean arg1);
	jNothing SetHeroesFlee(jBoolean arg1);
	jNothing SetHeroesTakeItems(jBoolean arg1);
	jNothing SetIgnoreInjured(jBoolean arg1);
	jNothing SetImageAboveWater(HIMAGE whichImage, jBoolean flag, jBoolean useWaterAlpha);
	jNothing SetImageColor(HIMAGE whichImage, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	jNothing SetImageConstantHeight(HIMAGE whichImage, jBoolean flag, jReal* height);
	jNothing SetImagePosition(HIMAGE whichImage, jReal* x, jReal* y, jReal* z);
	jNothing SetImageRender(HIMAGE whichImage, jBoolean flag);
	jNothing SetImageRenderAlways(HIMAGE whichImage, jBoolean flag);
	jNothing SetImageType(HIMAGE whichImage, jInteger imageType);
	jNothing SetIntegerGameState(HIGAMESTATE whichIntegerGameState, jInteger value);
	jNothing SetIntroShotModel(jString introModelPath);
	jNothing SetIntroShotText(jString introText);
	jNothing SetItemCharges(HITEM whichItem, jInteger charges);
	jNothing SetItemDropID(HITEM whichItem, jInteger unitId);
	jNothing SetItemDropOnDeath(HITEM whichItem, jBoolean flag);
	jNothing SetItemDroppable(HITEM i, jBoolean flag);
	jNothing SetItemInvulnerable(HITEM whichItem, jBoolean flag);
	jNothing SetItemPawnable(HITEM i, jBoolean flag);
	jNothing SetItemPlayer(HITEM whichItem, HPLAYER whichPlayer, jBoolean changeColor);
	jNothing SetItemPosition(HITEM i, jReal* x, jReal* y);
	jNothing SetItemTypeSlots(HUNIT whichUnit, jInteger slots);
	jNothing SetItemUserData(HITEM whichItem, jInteger data);
	jNothing SetItemVisible(HITEM whichItem, jBoolean show);
	jBoolean SetLightningColor(HLIGHTNING whichBolt, jReal* r, jReal* g, jReal* b, jReal* a);
	jNothing SetMapDescription(jString description);
	jNothing SetMapFlag(HMAPFLAG whichMapFlag, jBoolean value);
	jNothing SetMapMusic(jString musicName, jBoolean random, jInteger index);
	jNothing SetMapName(jString name);
	jNothing SetMeleeAI();
	jNothing SetMissionAvailable(jInteger campaignNumber, jInteger missionNumber, jBoolean available);
	jNothing SetMusicPlayPosition(jInteger millisecs);
	jNothing SetMusicVolume(jInteger volume);
	jNothing SetNewHeroes(jBoolean arg1);
	jNothing SetOpCinematicAvailable(jInteger campaignNumber, jBoolean available);
	jNothing SetPeonsRepair(jBoolean arg1);
	jNothing SetPlayerAbilityAvailable(HPLAYER whichPlayer, jInteger abilid, jBoolean avail);
	jNothing SetPlayerAlliance(HPLAYER sourcePlayer, HPLAYER otherPlayer, HALLIANCETYPE whichAllianceSetting, jBoolean value);
	jNothing SetPlayerColor(HPLAYER whichPlayer, HPLAYERCOLOR color);
	jNothing SetPlayerController(HPLAYER whichPlayer, HMAPCONTROL controlType);
	jNothing SetPlayerHandicap(HPLAYER whichPlayer, jReal* handicap);
	jNothing SetPlayerHandicapXP(HPLAYER whichPlayer, jReal* handicap);
	jNothing SetPlayerName(HPLAYER whichPlayer, jString name);
	jNothing SetPlayerOnScoreScreen(HPLAYER whichPlayer, jBoolean flag);
	jNothing SetPlayerRacePreference(HPLAYER whichPlayer, HRACEPREFERENCE whichRacePreference);
	jNothing SetPlayerRaceSelectable(HPLAYER whichPlayer, jBoolean value);
	jNothing SetPlayerStartLocation(HPLAYER whichPlayer, jInteger startLocIndex);
	jNothing SetPlayerState(HPLAYER whichPlayer, HPLAYERSTATE whichPlayerState, jInteger value);
	jNothing SetPlayerTaxRate(HPLAYER sourcePlayer, HPLAYER otherPlayer, HPLAYERSTATE whichResource, jInteger rate);
	jNothing SetPlayerTeam(HPLAYER whichPlayer, jInteger whichTeam);
	jNothing SetPlayerTechMaxAllowed(HPLAYER whichPlayer, jInteger techid, jInteger maximum);
	jNothing SetPlayerTechResearched(HPLAYER whichPlayer, jInteger techid, jInteger setToLevel);
	jNothing SetPlayerUnitsOwner(HPLAYER whichPlayer, jInteger newOwner);
	jNothing SetPlayers(jInteger playercount);
	jBoolean SetProduce(jInteger arg1, jInteger arg2, jInteger arg3);
	jNothing SetRandomPaths(jBoolean arg1);
	jNothing SetRandomSeed(jInteger seed);
	jNothing SetRect(HRECT whichRect, jReal* minx, jReal* miny, jReal* maxx, jReal* maxy);
	jNothing SetRectFromLoc(HRECT whichRect, HLOCATION min, HLOCATION max);
	jNothing SetReplacementCount(jInteger arg1);
	jNothing SetReservedLocalHeroButtons(jInteger reserved);
	jNothing SetResourceAmount(HUNIT whichUnit, jInteger amount);
	jNothing SetResourceDensity(HMAPDENSITY whichdensity);
	jNothing SetSkyModel(jString skyModelFile);
	jNothing SetSlowChopping(jBoolean arg1);
	jNothing SetSmartArtillery(jBoolean arg1);
	jNothing SetSoundChannel(HSOUND soundHandle, jInteger channel);
	jNothing SetSoundConeAngles(HSOUND soundHandle, jReal* inside, jReal* outside, jInteger outsideVolume);
	jNothing SetSoundConeOrientation(HSOUND soundHandle, jReal* x, jReal* y, jReal* z);
	jNothing SetSoundDistanceCutoff(HSOUND soundHandle, jReal* cutoff);
	jNothing SetSoundDistances(HSOUND soundHandle, jReal* minDist, jReal* maxDist);
	jNothing SetSoundDuration(HSOUND soundHandle, jInteger duration);
	jNothing SetSoundParamsFromLabel(HSOUND soundHandle, jString soundLabel);
	jNothing SetSoundPitch(HSOUND soundHandle, jReal* pitch);
	jNothing SetSoundPlayPosition(HSOUND soundHandle, jInteger millisecs);
	jNothing SetSoundPosition(HSOUND soundHandle, jReal* x, jReal* y, jReal* z);
	jNothing SetSoundVelocity(HSOUND soundHandle, jReal* x, jReal* y, jReal* z);
	jNothing SetSoundVolume(HSOUND soundHandle, jInteger volume);
	jNothing SetStackedSound(jString arg1, jReal* arg2, jReal* arg3);
	jNothing SetStackedSoundRect(jString arg1, HRECT arg2);
	jNothing SetStagePoint(jReal* arg1, jReal* arg2);
	jNothing SetStartLocPrio(jInteger whichStartLoc, jInteger prioSlotIndex, jInteger otherStartLocIndex, HSTARTLOCPRIO priority);
	jNothing SetStartLocPrioCount(jInteger whichStartLoc, jInteger prioSlotCount);
	jNothing SetTargetHeroes(jBoolean arg1);
	jNothing SetTeams(jInteger teamcount);
	jNothing SetTerrainFog(jReal* a, jReal* b, jReal* c, jReal* d, jReal* e);
	jNothing SetTerrainFogEx(jInteger style, jReal* zstart, jReal* zend, jReal* density, jReal* red, jReal* green, jReal* blue);
	jNothing SetTerrainPathable(jReal* x, jReal* y, HPATHINGTYPE t, jBoolean flag);
	jNothing SetTerrainType(jReal* x, jReal* y, jInteger terrainType, jInteger variation, jInteger area, jInteger shape);
	jNothing SetTextTagAge(HTEXTTAG t, jReal* age);
	jNothing SetTextTagColor(HTEXTTAG t, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	jNothing SetTextTagFadepoint(HTEXTTAG t, jReal* fadepoint);
	jNothing SetTextTagLifespan(HTEXTTAG t, jReal* lifespan);
	jNothing SetTextTagPermanent(HTEXTTAG t, jBoolean flag);
	jNothing SetTextTagPos(HTEXTTAG t, jReal* x, jReal* y, jReal* heightOffset);
	jNothing SetTextTagPosUnit(HTEXTTAG t, HUNIT whichUnit, jReal* heightOffset);
	jNothing SetTextTagSuspended(HTEXTTAG t, jBoolean flag);
	jNothing SetTextTagText(HTEXTTAG t, jString s, jReal* height);
	jNothing SetTextTagVelocity(HTEXTTAG t, jReal* xvel, jReal* yvel);
	jNothing SetTextTagVisibility(HTEXTTAG t, jBoolean flag);
	jNothing SetThematicMusicPlayPosition(jInteger millisecs);
	jNothing SetTimeOfDayScale(jReal* r);
	jNothing SetTutorialCleared(jBoolean cleared);
	jNothing SetUbersplatRender(HUBERSPLAT whichSplat, jBoolean flag);
	jNothing SetUbersplatRenderAlways(HUBERSPLAT whichSplat, jBoolean flag);
	jInteger SetUnitAbilityLevel(HUNIT whichUnit, jInteger abilcode, jInteger level);
	jNothing SetUnitAcquireRange(HUNIT whichUnit, jReal* newAcquireRange);
	jNothing SetUnitAnimation(HUNIT whichUnit, jString whichAnimation);
	jNothing SetUnitAnimationByIndex(HUNIT whichUnit, jInteger whichAnimation);
	jNothing SetUnitAnimationWithRarity(HUNIT whichUnit, jString whichAnimation, HRARITYCONTROL rarity);
	jNothing SetUnitBlendTime(HUNIT whichUnit, jReal* blendTime);
	jNothing SetUnitColor(HUNIT whichUnit, HPLAYERCOLOR whichColor);
	jNothing SetUnitCreepGuard(HUNIT whichUnit, jBoolean creepGuard);
	jNothing SetUnitExploded(HUNIT whichUnit, jBoolean exploded);
	jNothing SetUnitFacing(HUNIT whichUnit, jReal* facingAngle);
	jNothing SetUnitFacingTimed(HUNIT whichUnit, jReal* facingAngle, jReal* duration);
	jNothing SetUnitFlyHeight(HUNIT whichUnit, jReal* newHeight, jReal* rate);
	jNothing SetUnitFog(jReal* a, jReal* b, jReal* c, jReal* d, jReal* e);
	jNothing SetUnitInvulnerable(HUNIT whichUnit, jBoolean flag);
	jNothing SetUnitLookAt(HUNIT whichUnit, jString whichBone, HUNIT lookAtTarget, jReal* offsetX, jReal* offsetY, jReal* offsetZ);
	jNothing SetUnitMoveSpeed(HUNIT whichUnit, jReal* newSpeed);
	jNothing SetUnitOwner(HUNIT whichUnit, HPLAYER whichPlayer, jBoolean changeColor);
	jNothing SetUnitPathing(HUNIT whichUnit, jBoolean flag);
	jNothing SetUnitPosition(HUNIT whichUnit, jReal* newX, jReal* newY);
	jNothing SetUnitPositionLoc(HUNIT whichUnit, HLOCATION whichLocation);
	jNothing SetUnitPropWindow(HUNIT whichUnit, jReal* newPropWindowAngle);
	jNothing SetUnitRescuable(HUNIT whichUnit, HPLAYER byWhichPlayer, jBoolean flag);
	jNothing SetUnitRescueRange(HUNIT whichUnit, jReal* range);
	jNothing SetUnitScale(HUNIT whichUnit, jReal* scaleX, jReal* scaleY, jReal* scaleZ);
	jNothing SetUnitState(HUNIT whichUnit, HUNITSTATE whichUnitState, jReal* newVal);
	jNothing SetUnitTimeScale(HUNIT whichUnit, jReal* timeScale);
	jNothing SetUnitTurnSpeed(HUNIT whichUnit, jReal* newTurnSpeed);
	jNothing SetUnitTypeSlots(HUNIT whichUnit, jInteger slots);
	jNothing SetUnitUseFood(HUNIT whichUnit, jBoolean useFood);
	jNothing SetUnitUserData(HUNIT whichUnit, jInteger data);
	jNothing SetUnitVertexColor(HUNIT whichUnit, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	jNothing SetUnitX(HUNIT whichUnit, jReal* newX);
	jNothing SetUnitY(HUNIT whichUnit, jReal* newY);
	jNothing SetUnitsFlee(jBoolean arg1);
	jBoolean SetUpgrade(jInteger arg1);
	jNothing SetWatchMegaTargets(jBoolean arg1);
	jNothing SetWaterBaseColor(jInteger red, jInteger green, jInteger blue, jInteger alpha);
	jNothing SetWaterDeforms(jBoolean val);
	jNothing SetWidgetLife(HWIDGET whichWidget, jReal* newLife);
	jNothing ShiftTownSpot(jReal* arg1, jReal* arg2);
	jNothing ShowDestructable(HDESTRUCTABLE d, jBoolean flag);
	jNothing ShowImage(HIMAGE whichImage, jBoolean flag);
	jNothing ShowInterface(jBoolean flag, jReal* fadeDuration);
	jNothing ShowUbersplat(HUBERSPLAT whichSplat, jBoolean flag);
	jNothing ShowUnit(HUNIT whichUnit, jBoolean show);
	jReal Sin(jReal* radians);
	jNothing Sleep(jReal* arg1);
	jReal SquareRoot(jReal* x);
	jNothing StartCampaignAI(HPLAYER num, jString script);
	jNothing StartGetEnemyBase();
	jNothing StartMeleeAI(HPLAYER num, jString script);
	jNothing StartSound(HSOUND soundHandle);
	jNothing StartThread(jCode arg1);
	jNothing StopCamera();
	jNothing StopGathering();
	jNothing StopMusic(jBoolean fadeOut);
	jNothing StopSound(HSOUND soundHandle, jBoolean killWhenDone, jBoolean fadeOut);
	jNothing StoreBoolean(HGAMECACHE cache, jString missionKey, jString key, jBoolean value);
	jNothing StoreInteger(HGAMECACHE cache, jString missionKey, jString key, jInteger value);
	jNothing StoreReal(HGAMECACHE cache, jString missionKey, jString key, jReal* value);
	jBoolean StoreString(HGAMECACHE cache, jString missionKey, jString key, jString value);
	jBoolean StoreUnit(HGAMECACHE cache, jString missionKey, jString key, HUNIT whichUnit);
	jString StringCase(jString source, jBoolean upper);
	jInteger StringHash(jString s);
	jInteger StringLength(jString s);
	jString SubString(jString source, jInteger start, jInteger end);
	jBoolean SuicidePlayer(HPLAYER arg1, jBoolean arg2);
	jBoolean SuicidePlayerUnits(HPLAYER arg1, jBoolean arg2);
	jNothing SuicideUnit(jInteger arg1, jInteger arg2);
	jNothing SuicideUnitEx(jInteger arg1, jInteger arg2, jInteger arg3);
	jNothing SuspendHeroXP(HUNIT whichHero, jBoolean flag);
	jNothing SuspendTimeOfDay(jBoolean b);
	jNothing SyncSelections();
	jNothing SyncStoredBoolean(HGAMECACHE cache, jString missionKey, jString key);
	jNothing SyncStoredInteger(HGAMECACHE cache, jString missionKey, jString key);
	jNothing SyncStoredReal(HGAMECACHE cache, jString missionKey, jString key);
	jNothing SyncStoredString(HGAMECACHE cache, jString missionKey, jString key);
	jNothing SyncStoredUnit(HGAMECACHE cache, jString missionKey, jString key);
	jReal Tan(jReal* radians);
	jNothing TeleportCaptain(jReal* arg1, jReal* arg2);
	HTERRAINDEFORMATION TerrainDeformCrater(jReal* x, jReal* y, jReal* radius, jReal* depth, jInteger duration, jBoolean permanent);
	HTERRAINDEFORMATION TerrainDeformRandom(jReal* x, jReal* y, jReal* radius, jReal* minDelta, jReal* maxDelta, jInteger duration, jInteger updateInterval);
	HTERRAINDEFORMATION TerrainDeformRipple(jReal* x, jReal* y, jReal* radius, jReal* depth, jInteger duration, jInteger count, jReal* spaceWaves, jReal* timeWaves, jReal* radiusStartPct, jBoolean limitNeg);
	jNothing TerrainDeformStop(HTERRAINDEFORMATION deformation, jInteger duration);
	jNothing TerrainDeformStopAll();
	HTERRAINDEFORMATION TerrainDeformWave(jReal* x, jReal* y, jReal* dirX, jReal* dirY, jReal* distance, jReal* speed, jReal* radius, jReal* depth, jInteger trailTime, jInteger count);
	jNothing TimerDialogDisplay(HTIMERDIALOG whichDialog, jBoolean display);
	jNothing TimerDialogSetRealTimeRemaining(HTIMERDIALOG whichDialog, jReal* timeRemaining);
	jNothing TimerDialogSetSpeed(HTIMERDIALOG whichDialog, jReal* speedMultFactor);
	jNothing TimerDialogSetTimeColor(HTIMERDIALOG whichDialog, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	jNothing TimerDialogSetTitle(HTIMERDIALOG whichDialog, jString title);
	jNothing TimerDialogSetTitleColor(HTIMERDIALOG whichDialog, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	jReal TimerGetElapsed(HTIMER whichTimer);
	jReal TimerGetRemaining(HTIMER whichTimer);
	jReal TimerGetTimeout(HTIMER whichTimer);
	jNothing TimerStart(HTIMER whichTimer, jReal* timeout, jBoolean periodic, jCode handlerFunc);
	jBoolean TownHasHall(jInteger arg1);
	jBoolean TownHasMine(jInteger arg1);
	jBoolean TownThreatened();
	jInteger TownWithMine();
	HTRIGGERACTION TriggerAddAction(jTrigger whichTrigger, jCode actionFunc);
	HTRIGGERCONDITION TriggerAddCondition(jTrigger whichTrigger, HBOOLEXPR condition);
	jNothing TriggerClearActions(jTrigger whichTrigger);
	jNothing TriggerClearConditions(jTrigger whichTrigger);
	jBoolean TriggerEvaluate(jTrigger whichTrigger);
	jNothing TriggerExecute(jTrigger whichTrigger);
	jNothing TriggerExecuteWait(jTrigger whichTrigger);
	HEVENT TriggerRegisterDeathEvent(jTrigger whichTrigger, HWIDGET whichWidget);
	HEVENT TriggerRegisterDialogButtonEvent(jTrigger whichTrigger, HBUTTON whichButton);
	HEVENT TriggerRegisterDialogEvent(jTrigger whichTrigger, HDIALOG whichDialog);
	HEVENT TriggerRegisterEnterRegion(jTrigger whichTrigger, HREGION whichRegion, HBOOLEXPR filter);
	HEVENT TriggerRegisterFilterUnitEvent(jTrigger whichTrigger, HUNIT whichUnit, HUNITEVENT whichEvent, HBOOLEXPR filter);
	HEVENT TriggerRegisterGameEvent(jTrigger whichTrigger, HGAMEEVENT whichGameEvent);
	HEVENT TriggerRegisterGameStateEvent(jTrigger whichTrigger, HGAMESTATE whichState, HLIMITOP opcode, jReal* limitval);
	HEVENT TriggerRegisterLeaveRegion(jTrigger whichTrigger, HREGION whichRegion, HBOOLEXPR filter);
	HEVENT TriggerRegisterPlayerAllianceChange(jTrigger whichTrigger, HPLAYER whichPlayer, HALLIANCETYPE whichAlliance);
	HEVENT TriggerRegisterPlayerChatEvent(jTrigger whichTrigger, HPLAYER whichPlayer, jString chatMessageToDetect, jBoolean exactMatchOnly);
	HEVENT TriggerRegisterPlayerEvent(jTrigger whichTrigger, HPLAYER whichPlayer, HPLAYEREVENT whichPlayerEvent);
	HEVENT TriggerRegisterPlayerStateEvent(jTrigger whichTrigger, HPLAYER whichPlayer, HPLAYERSTATE whichState, HLIMITOP opcode, jReal* limitval);
	HEVENT TriggerRegisterPlayerUnitEvent(jTrigger whichTrigger, HPLAYER whichPlayer, HPLAYERUNITEVENT whichPlayerUnitEvent, HBOOLEXPR filter);
	HEVENT TriggerRegisterTimerEvent(jTrigger whichTrigger, jReal* timeout, jBoolean periodic);
	HEVENT TriggerRegisterTimerExpireEvent(jTrigger whichTrigger, HTIMER t);
	HEVENT TriggerRegisterTrackableHitEvent(jTrigger whichTrigger, HTRACKABLE t);
	HEVENT TriggerRegisterTrackableTrackEvent(jTrigger whichTrigger, HTRACKABLE t);
	HEVENT TriggerRegisterUnitEvent(jTrigger whichTrigger, HUNIT whichUnit, HUNITEVENT whichEvent);
	HEVENT TriggerRegisterUnitInRange(jTrigger whichTrigger, HUNIT whichUnit, jReal* range, HBOOLEXPR filter);
	HEVENT TriggerRegisterUnitStateEvent(jTrigger whichTrigger, HUNIT whichUnit, HUNITSTATE whichState, HLIMITOP opcode, jReal* limitval);
	HEVENT TriggerRegisterVariableEvent(jTrigger whichTrigger, jString varName, HLIMITOP opcode, jReal* limitval);
	jNothing TriggerRemoveAction(jTrigger whichTrigger, HTRIGGERACTION whichAction);
	jNothing TriggerRemoveCondition(jTrigger whichTrigger, HTRIGGERCONDITION whichCondition);
	jNothing TriggerSleepAction(jReal* timeout);
	jNothing TriggerSyncReady();
	jNothing TriggerSyncStart();
	jNothing TriggerWaitForSound(HSOUND s, jReal* offset);
	jNothing TriggerWaitOnSleeps(jTrigger whichTrigger, jBoolean flag);
	jBoolean UnitAddAbility(HUNIT whichUnit, jInteger abilityId);
	jNothing UnitAddIndicator(HUNIT whichUnit, jInteger red, jInteger green, jInteger blue, jInteger alpha);
	jBoolean UnitAddItem(HUNIT whichUnit, HITEM whichItem);
	HITEM UnitAddItemById(HUNIT whichUnit, jInteger itemId);
	jBoolean UnitAddItemToSlotById(HUNIT whichUnit, jInteger itemId, jInteger itemSlot);
	jNothing UnitAddSleep(HUNIT whichUnit, jBoolean add);
	jNothing UnitAddSleepPerm(HUNIT whichUnit, jBoolean add);
	jBoolean UnitAddType(HUNIT whichUnit, HUNITTYPE whichUnitType);
	jBoolean UnitAlive(HUNIT arg1);
	jNothing UnitApplyTimedLife(HUNIT whichUnit, jInteger buffId, jReal* duration);
	jBoolean UnitCanSleep(HUNIT whichUnit);
	jBoolean UnitCanSleepPerm(HUNIT whichUnit);
	jInteger UnitCountBuffsEx(HUNIT whichUnit, jBoolean removePositive, jBoolean removeNegative, jBoolean magic, jBoolean physical, jBoolean timedLife, jBoolean aura, jBoolean autoDispel);
	jBoolean UnitDamagePoint(HUNIT whichUnit, jReal* delay, jReal* radius, jReal* x, jReal* y, jReal* amount, jBoolean attack, jBoolean ranged, HATTACKTYPE attackType, HDAMAGETYPE damageType, HWEAPONTYPE weaponType);
	jBoolean UnitDamageTarget(HUNIT whichUnit, HWIDGET target, jReal* amount, jBoolean attack, jBoolean ranged, HATTACKTYPE attackType, HDAMAGETYPE damageType, HWEAPONTYPE weaponType);
	jBoolean UnitDropItemPoint(HUNIT whichUnit, HITEM whichItem, jReal* x, jReal* y);
	jBoolean UnitDropItemSlot(HUNIT whichUnit, HITEM whichItem, jInteger slot);
	jBoolean UnitDropItemTarget(HUNIT whichUnit, HITEM whichItem, HWIDGET target);
	jBoolean UnitHasBuffsEx(HUNIT whichUnit, jBoolean removePositive, jBoolean removeNegative, jBoolean magic, jBoolean physical, jBoolean timedLife, jBoolean aura, jBoolean autoDispel);
	jBoolean UnitHasItem(HUNIT whichUnit, HITEM whichItem);
	jInteger UnitId(jString unitIdString);
	jString UnitId2String(jInteger unitId);
	jBoolean UnitIgnoreAlarm(HUNIT whichUnit, jBoolean flag);
	jBoolean UnitIgnoreAlarmToggled(HUNIT whichUnit);
	jInteger UnitInventorySize(HUNIT whichUnit);
	jBoolean UnitInvis(HUNIT arg1);
	jBoolean UnitIsSleeping(HUNIT whichUnit);
	HITEM UnitItemInSlot(HUNIT whichUnit, jInteger itemSlot);
	jBoolean UnitMakeAbilityPermanent(HUNIT whichUnit, jBoolean permanent, jInteger abilityId);
	jBoolean UnitModifySkillPoints(HUNIT whichHero, jInteger skillPointDelta);
	jNothing UnitPauseTimedLife(HUNIT whichUnit, jBoolean flag);
	jNothing UnitPoolAddUnitType(HUNITPOOL whichPool, jInteger unitId, jReal* weight);
	jNothing UnitPoolRemoveUnitType(HUNITPOOL whichPool, jInteger unitId);
	jBoolean UnitRemoveAbility(HUNIT whichUnit, jInteger abilityId);
	jNothing UnitRemoveBuffs(HUNIT whichUnit, jBoolean removePositive, jBoolean removeNegative);
	jNothing UnitRemoveBuffsEx(HUNIT whichUnit, jBoolean removePositive, jBoolean removeNegative, jBoolean magic, jBoolean physical, jBoolean timedLife, jBoolean aura, jBoolean autoDispel);
	jNothing UnitRemoveItem(HUNIT whichUnit, HITEM whichItem);
	HITEM UnitRemoveItemFromSlot(HUNIT whichUnit, jInteger itemSlot);
	jBoolean UnitRemoveType(HUNIT whichUnit, HUNITTYPE whichUnitType);
	jNothing UnitResetCooldown(HUNIT whichUnit);
	jNothing UnitSetConstructionProgress(HUNIT whichUnit, jInteger constructionPercentage);
	jNothing UnitSetUpgradeProgress(HUNIT whichUnit, jInteger upgradePercentage);
	jNothing UnitSetUsesAltIcon(HUNIT whichUnit, jBoolean flag);
	jNothing UnitShareVision(HUNIT whichUnit, HPLAYER whichPlayer, jBoolean share);
	jBoolean UnitStripHeroLevel(HUNIT whichHero, jInteger howManyLevels);
	jNothing UnitSuspendDecay(HUNIT whichUnit, jBoolean suspend);
	jBoolean UnitUseItem(HUNIT whichUnit, HITEM whichItem);
	jBoolean UnitUseItemPoint(HUNIT whichUnit, HITEM whichItem, jReal* x, jReal* y);
	jBoolean UnitUseItemTarget(HUNIT whichUnit, HITEM whichItem, HWIDGET target);
	jNothing UnitWakeUp(HUNIT whichUnit);
	jNothing UnregisterStackedSound(HSOUND soundHandle, jBoolean byPosition, jReal* rectwidth, jReal* rectheight);
	jNothing Unsummon(HUNIT arg1);
	jBoolean VersionCompatible(HVERSION whichVersion);
	HVERSION VersionGet();
	jBoolean VersionSupported(HVERSION whichVersion);
	jNothing VolumeGroupReset();
	jNothing VolumeGroupSetVolume(HVOLUMEGROUP vgroup, jReal* scale);
	jBoolean WaitGetEnemyBase();
	jNothing WaygateActivate(HUNIT waygate, jBoolean activate);
	jReal WaygateGetDestinationX(HUNIT waygate);
	jReal WaygateGetDestinationY(HUNIT waygate);
	jBoolean WaygateIsActive(HUNIT waygate);
	jNothing WaygateSetDestination(HUNIT waygate, jReal* x, jReal* y);
}